## Flox Environment Manifest -----------------------------------------
##
##   _Everything_ you need to know about the _manifest_ is here:
##
##               https://flox.dev/docs/concepts/manifest
##
## -------------------------------------------------------------------
# Flox manifest version managed by Flox CLI
version = 1


## Install Packages --------------------------------------------------
##  $ flox install gum  <- puts a package in [install] section below
##  $ flox search gum   <- search for a package
##  $ flox show gum     <- show all versions of a package
## -------------------------------------------------------------------
[install]
gh.pkg-path = "gh"
git.pkg-path = "git"
gum.pkg-path = "gum"
bat.pkg-path = "bat"
curl.pkg-path = "curl"
openssl.pkg-path = "openssl"
gnused.pkg-path = "gnused"
gawk.pkg-path = "gawk"
gnugrep.pkg-path = "gnugrep"
coreutils.pkg-path = "coreutils"

## Environment Variables ---------------------------------------------
##  ... available for use in the activated environment
##      as well as [hook], [profile] scripts and [services] below.
## -------------------------------------------------------------------
[vars]
# INTRO_MESSAGE = "It's gettin' Flox in here"


## Activation Hook ---------------------------------------------------
##  ... run by _bash_ shell when you run 'flox activate'.
## -------------------------------------------------------------------
[hook]
on-activate = '''
# define paths
CONFIG_DIR="$HOME/.cache/flox/ghcli"
CONFIG_FILE="$CONFIG_DIR/github_config"
ENCRYPTED_TOKEN_FILE="$CONFIG_DIR/github_token.enc"
GIT_CREDENTIALS_FILE="$CONFIG_DIR/git_credentials.enc"
BASH_WRAPPER="$CONFIG_DIR/gh_wrapper.bash"
ZSH_WRAPPER="$CONFIG_DIR/gh_wrapper.zsh"
FISH_WRAPPER="$CONFIG_DIR/gh_wrapper.fish"

# detect operating system
detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "linux"
    else
        echo "unsupported"
    fi
}

# derive an encryption password from system information
derive_password() {
    # combine username, hostname and machine id for a unique but deterministic password
    local user_info="$USER"
    local host_info=$(hostname)
    local machine_id=""
    
    if [[ -f "/etc/machine-id" ]]; then
        machine_id=$(cat /etc/machine-id)
    elif [[ -f "/var/lib/dbus/machine-id" ]]; then
        machine_id=$(cat /var/lib/dbus/machine-id)
    elif [[ "$(detect_os)" == "macos" ]]; then
        machine_id=$(ioreg -rd1 -c IOPlatformExpertDevice | grep -E '(UUID)' | awk '{print $3}' | tr -d \")
    fi
    
    # combine and hash the information
    echo -n "${user_info}${host_info}${machine_id}flox-github-token" | openssl dgst -sha256 | awk '{print $2}'
}

# test if gh cli can directly authenticate with token
test_gh_direct_auth() {
    local token="$1"
    local orig_token=""
    
    # Backup any existing GITHUB_TOKEN
    if [[ -n "$GITHUB_TOKEN" ]]; then
        orig_token="$GITHUB_TOKEN"
    fi
    
    # Test with the new token
    export GITHUB_TOKEN="$token"
    if gh auth status &>/dev/null; then
        # Restore original token if any
        if [[ -n "$orig_token" ]]; then
            export GITHUB_TOKEN="$orig_token"
        else
            unset GITHUB_TOKEN
        fi
        return 0
    else
        # Restore original token if any
        if [[ -n "$orig_token" ]]; then
            export GITHUB_TOKEN="$orig_token"
        else
            unset GITHUB_TOKEN
        fi
        return 1
    fi
}

# store token in system keyring
store_github_token() {
    local token="$1"
    local os=$(detect_os)
    
    if [[ "$os" == "macos" ]]; then
        if security add-generic-password -s "flox-github" -a "$USER" -w "$token" -U; then
            # Test if gh works directly with the token
            if test_gh_direct_auth "$token"; then
                # No wrapper needed
                mkdir -p "$(dirname "$CONFIG_FILE")"
                echo "GITHUB_TOKEN_STORED=true" > "$CONFIG_FILE"
                echo "STORAGE_METHOD=keyring" >> "$CONFIG_FILE"
                echo "NEEDS_WRAPPER=false" >> "$CONFIG_FILE"
                
                # Configure github cli with the token
                echo "$token" | gh auth login --with-token
                
                echo "Token stored successfully in system keyring/keychain."
                return 0
            else
                # Wrapper needed
                mkdir -p "$(dirname "$CONFIG_FILE")"
                echo "GITHUB_TOKEN_STORED=true" > "$CONFIG_FILE"
                echo "STORAGE_METHOD=keyring" >> "$CONFIG_FILE"
                echo "NEEDS_WRAPPER=true" >> "$CONFIG_FILE"
                
                echo "Token stored successfully in system keyring/keychain."
                return 0
            fi
        else
            return 1
        fi
    elif [[ "$os" == "linux" ]]; then
        if echo -n "$token" | secret-tool store --label="Flox GitHub Token" service flox-github user "$USER"; then
            # Test if gh works directly with the token
            if test_gh_direct_auth "$token"; then
                # No wrapper needed
                mkdir -p "$(dirname "$CONFIG_FILE")"
                echo "GITHUB_TOKEN_STORED=true" > "$CONFIG_FILE"
                echo "STORAGE_METHOD=keyring" >> "$CONFIG_FILE"
                echo "NEEDS_WRAPPER=false" >> "$CONFIG_FILE"
                
                # Configure github cli with the token
                echo "$token" | gh auth login --with-token
                
                echo "Token stored successfully in system keyring/keychain."
                return 0
            else
                # Wrapper needed
                mkdir -p "$(dirname "$CONFIG_FILE")"
                echo "GITHUB_TOKEN_STORED=true" > "$CONFIG_FILE"
                echo "STORAGE_METHOD=keyring" >> "$CONFIG_FILE"
                echo "NEEDS_WRAPPER=true" >> "$CONFIG_FILE"
                
                echo "Token stored successfully in system keyring/keychain."
                return 0
            fi
        else
            return 1
        fi
    else
        echo "Error: Unsupported operating system."
        return 1
    fi
}

# store token in encrypted file as fallback
store_github_token_encrypted() {
    local token="$1"
    local password=$(derive_password)
    
    # create directory if it doesn't exist
    mkdir -p "$(dirname "$ENCRYPTED_TOKEN_FILE")"
    
    # encrypt token with openssl
    echo -n "$token" | openssl enc -aes-256-cbc -salt -pbkdf2 -pass pass:"$password" -out "$ENCRYPTED_TOKEN_FILE"
    
    # record that token has been stored in encrypted file
    mkdir -p "$(dirname "$CONFIG_FILE")"
    echo "GITHUB_TOKEN_STORED=true" > "$CONFIG_FILE"
    echo "STORAGE_METHOD=encrypted_file" >> "$CONFIG_FILE"
    echo "NEEDS_WRAPPER=true" >> "$CONFIG_FILE"
    echo "Token stored successfully in encrypted file."
}

# retrieve token from system keyring
retrieve_github_token_keyring() {
    local os=$(detect_os)
    
    if [[ "$os" == "macos" ]]; then
        security find-generic-password -s "flox-github" -a "$USER" -w 2>/dev/null
    elif [[ "$os" == "linux" ]]; then
        secret-tool lookup service flox-github user "$USER" 2>/dev/null
    fi
}

# retrieve token from encrypted file
retrieve_github_token_encrypted() {
    local password=$(derive_password)
    
    if [[ -f "$ENCRYPTED_TOKEN_FILE" ]]; then
        openssl enc -aes-256-cbc -d -salt -pbkdf2 -pass pass:"$password" -in "$ENCRYPTED_TOKEN_FILE" 2>/dev/null
        return $?
    fi
    return 1
}

# retrieve github token from appropriate storage
retrieve_github_token() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
        if [[ "$STORAGE_METHOD" == "keyring" ]]; then
            retrieve_github_token_keyring
        elif [[ "$STORAGE_METHOD" == "encrypted_file" ]]; then
            retrieve_github_token_encrypted
        fi
    fi
}

# check if token exists
token_exists() {
    local token=$(retrieve_github_token)
    [[ -n "$token" ]]
}

# validate github token with api
validate_github_token() {
    local token="$1"
    echo "Validating GitHub token..."
    
    # test token with a simple api request
    local response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $token" https://api.github.com/user)
    
    if [[ "$response" == "200" ]]; then
        return 0
    else
        return 1
    fi
}

# check for existing token and validate
check_existing_token() {
    if [[ -f "$CONFIG_FILE" ]] && source "$CONFIG_FILE" && [[ "$GITHUB_TOKEN_STORED" == "true" ]]; then
        # if no wrapper needed, verify with gh auth status
        if [[ "$NEEDS_WRAPPER" == "false" ]]; then
            if gh auth status &>/dev/null; then
                return 0
            else
                echo "GitHub integration was set up, but authentication is no longer working."
                return 1
            fi
        else
            # verify the token still works
            local token=$(retrieve_github_token)
            if [[ -n "$token" ]] && validate_github_token "$token"; then
                # create shell wrappers if they don't exist but are needed
                if [[ ! -f "$BASH_WRAPPER" ]]; then
                    create_shell_wrappers
                fi
                return 0
            else
                echo "Stored GitHub token is invalid or expired."
                return 1
            fi
        fi
    fi
    return 1
}

# create wrappers for different shells
create_shell_wrappers() {
    # create bash/zsh wrapper
    cat > "$BASH_WRAPPER" << 'BASH_EOF'
# detect operating system
_gh_wrapper_detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "linux"
    else
        echo "unsupported"
    fi
}

# derive an encryption password from system information
_gh_wrapper_derive_password() {
    # combine username, hostname and machine id for a unique but deterministic password
    local user_info="$USER"
    local host_info=$(hostname)
    local machine_id=""
    
    if [[ -f "/etc/machine-id" ]]; then
        machine_id=$(cat /etc/machine-id)
    elif [[ -f "/var/lib/dbus/machine-id" ]]; then
        machine_id=$(cat /var/lib/dbus/machine-id)
    elif [[ "$(_gh_wrapper_detect_os)" == "macos" ]]; then
        machine_id=$(ioreg -rd1 -c IOPlatformExpertDevice | grep -E '(UUID)' | awk '{print $3}' | tr -d \")
    fi
    
    # combine and hash the information
    echo -n "${user_info}${host_info}${machine_id}flox-github-token" | openssl dgst -sha256 | awk '{print $2}'
}

# retrieve token from system keyring
_gh_wrapper_retrieve_github_token_keyring() {
    local os=$(_gh_wrapper_detect_os)
    
    if [[ "$os" == "macos" ]]; then
        security find-generic-password -s "flox-github" -a "$USER" -w 2>/dev/null
    elif [[ "$os" == "linux" ]]; then
        secret-tool lookup service flox-github user "$USER" 2>/dev/null
    fi
}

# retrieve token from encrypted file
_gh_wrapper_retrieve_github_token_encrypted() {
    local password=$(_gh_wrapper_derive_password)
    local token_file="${FLOX_ENV_CACHE:-$HOME/.cache/flox}/github_token.enc"
    
    if [[ -f "$token_file" ]]; then
        openssl enc -aes-256-cbc -d -salt -pbkdf2 -pass pass:"$password" -in "$token_file" 2>/dev/null
        return $?
    fi
    return 1
}

# retrieve github token
_gh_wrapper_retrieve_github_token() {
    local config_file="${FLOX_ENV_CACHE:-$HOME/.cache/flox}/github_config"
    
    if [[ -f "$config_file" ]]; then
        source "$config_file"
        if [[ "$STORAGE_METHOD" == "keyring" ]]; then
            _gh_wrapper_retrieve_github_token_keyring
        elif [[ "$STORAGE_METHOD" == "encrypted_file" ]]; then
            _gh_wrapper_retrieve_github_token_encrypted
        fi
    fi
}

# wrapper function for gh
gh() {
    local token=$(_gh_wrapper_retrieve_github_token)
    if [[ -n "$token" ]]; then
        GITHUB_TOKEN="$token" command gh "$@"
    else
        echo "Error: Unable to retrieve GitHub token. Please run 'flox activate' to set up GitHub integration."
        return 1
    fi
}
BASH_EOF

    # Create copy for zsh (same content)
    cp "$BASH_WRAPPER" "$ZSH_WRAPPER"
    
    # Create fish wrapper with a different heredoc delimiter
    cat > "$FISH_WRAPPER" << 'FISH_EOF'
# detect operating system
function _gh_wrapper_detect_os
    switch (uname)
        case Darwin
            echo "macos"
        case Linux
            echo "linux"
        case '*'
            echo "unsupported"
    end
end

# derive an encryption password from system information
function _gh_wrapper_derive_password
    # combine username, hostname and machine id for a unique but deterministic password
    set -l user_info $USER
    set -l host_info (hostname)
    set -l machine_id ""
    
    if test -f "/etc/machine-id"
        set machine_id (cat /etc/machine-id)
    else if test -f "/var/lib/dbus/machine-id"
        set machine_id (cat /var/lib/dbus/machine-id)
    else if test (_gh_wrapper_detect_os) = "macos"
        set machine_id (ioreg -rd1 -c IOPlatformExpertDevice | grep -E '(UUID)' | awk '{print $3}' | tr -d \")
    end
    
    # combine and hash the information
    echo -n "$user_info$host_info$machine_idflox-github-token" | openssl dgst -sha256 | awk '{print $2}'
end

# retrieve token from system keyring
function _gh_wrapper_retrieve_github_token_keyring
    set -l os (_gh_wrapper_detect_os)
    
    if test $os = "macos"
        security find-generic-password -s "flox-github" -a "$USER" -w 2>/dev/null
    else if test $os = "linux"
        secret-tool lookup service flox-github user "$USER" 2>/dev/null
    end
end

# retrieve token from encrypted file
function _gh_wrapper_retrieve_github_token_encrypted
    set -l password (_gh_wrapper_derive_password)
    set -l token_file "$HOME/.cache/flox/ghcli/github_token.enc"
    
    if test -f "$token_file"
        openssl enc -aes-256-cbc -d -salt -pbkdf2 -pass pass:"$password" -in "$token_file" 2>/dev/null
        return $status
    end
    return 1
end

# retrieve github token
function _gh_wrapper_retrieve_github_token
    set -l config_file "$HOME/.cache/flox/ghcli/github_config"
    
    if test -f "$config_file"
        set -l storage_method (grep "STORAGE_METHOD" "$config_file" | cut -d '=' -f2)
        
        if test "$storage_method" = "keyring"
            _gh_wrapper_retrieve_github_token_keyring
        else if test "$storage_method" = "encrypted_file"
            _gh_wrapper_retrieve_github_token_encrypted
        end
    end
end

# wrapper function for gh
function gh
    set -l token (_gh_wrapper_retrieve_github_token)
    if test -n "$token"
        env GITHUB_TOKEN="$token" command gh $argv
    else
        echo "Error: Unable to retrieve GitHub token. Please run 'flox activate' to set up GitHub integration."
        return 1
    end
end
FISH_EOF
}

# Configure Git credentials
configure_git_credentials() {
    local os=$(detect_os)
    local username="$1"
    local password="$2"
    
    # Check and configure git user.name and user.email if needed
    check_and_configure_git_user_info
    
    # Configure git credential helper based on OS
    if [[ "$os" == "macos" ]]; then
        # Use the macOS keychain helper
        git config --global credential.helper osxkeychain
        
        # Store credentials in the keychain
        # Create a temporary file to pass to git credential
        local temp_file=$(mktemp)
        cat > "$temp_file" << EOF
protocol=https
host=github.com
username=$username
password=$password
EOF
        
        # Store credentials
        cat "$temp_file" | git credential approve
        
        # Remove temporary file
        rm "$temp_file"
        
        echo "Git credentials stored in macOS keychain."
        return 0
    elif [[ "$os" == "linux" ]]; then
        # Check if secret-tool is available for keyring storage
        if command -v secret-tool &> /dev/null; then
            git config --global credential.helper store
            
            # Use secret-tool to store credentials
            echo -n "$password" | secret-tool store --label="Git Credentials" service git-https host github.com user "$username"
            
            # Create a credential helper script that uses secret-tool
            local git_credential_helper="$CONFIG_DIR/git-credential-flox-helper"
            
            cat > "$git_credential_helper" << 'EOF'
#!/bin/bash

if [ "$1" = "get" ]; then
    # Read the input to extract username
    while read line; do
        if [[ "$line" =~ ^username=(.*)$ ]]; then
            username="${BASH_REMATCH[1]}"
        fi
        if [[ "$line" =~ ^host=(.*)$ ]]; then
            host="${BASH_REMATCH[1]}"
        fi
        if [[ -z "$line" ]]; then
            break
        fi
    done
    
    # Try to get password from secret-tool
    if [[ -n "$username" && -n "$host" ]]; then
        password=$(secret-tool lookup service git-https host "$host" user "$username" 2>/dev/null)
        if [[ -n "$password" ]]; then
            echo "password=$password"
        fi
    fi
fi
EOF
            
            chmod +x "$git_credential_helper"
            git config --global credential.helper "$git_credential_helper"
            
            echo "Git credentials stored in keyring using secret-tool."
            return 0
        else
            # Use encrypted storage as fallback
            local password_derive=$(derive_password)
            
            # Create credentials file content
            local credentials="https://$username:$password@github.com"
            
            # Encrypt credentials
            echo -n "$credentials" | openssl enc -aes-256-cbc -salt -pbkdf2 -pass pass:"$password_derive" -out "$GIT_CREDENTIALS_FILE"
            
            # Create a credential helper script
            local git_credential_helper="$CONFIG_DIR/git-credential-flox-helper"
            
            cat > "$git_credential_helper" << 'EOF'
#!/bin/bash

# Path to encrypted credentials file
CREDENTIALS_FILE="$HOME/.cache/flox/ghcli/git_credentials.enc"

# Function to derive password
derive_password() {
    # combine username, hostname and machine id for a unique but deterministic password
    local user_info="$USER"
    local host_info=$(hostname)
    local machine_id=""
    
    if [[ -f "/etc/machine-id" ]]; then
        machine_id=$(cat /etc/machine-id)
    elif [[ -f "/var/lib/dbus/machine-id" ]]; then
        machine_id=$(cat /var/lib/dbus/machine-id)
    fi
    
    # combine and hash the information
    echo -n "${user_info}${host_info}${machine_id}flox-github-token" | openssl dgst -sha256 | awk '{print $2}'
}

if [ "$1" = "get" ]; then
    # Read input to ensure we're being asked about GitHub
    is_github=false
    while read line; do
        if [[ "$line" =~ ^host=github.com$ ]]; then
            is_github=true
        fi
        if [[ -z "$line" ]]; then
            break
        fi
    done
    
    if [ "$is_github" = true ] && [ -f "$CREDENTIALS_FILE" ]; then
        # Decrypt the credentials file
        password=$(derive_password)
        credentials=$(openssl enc -aes-256-cbc -d -salt -pbkdf2 -pass pass:"$password" -in "$CREDENTIALS_FILE" 2>/dev/null)
        
        if [[ $? -eq 0 && -n "$credentials" ]]; then
            # Extract username and password from credentials
            if [[ "$credentials" =~ https://([^:]+):([^@]+)@github.com ]]; then
                username="${BASH_REMATCH[1]}"
                password="${BASH_REMATCH[2]}"
                
                echo "username=$username"
                echo "password=$password"
            fi
        fi
    fi
fi
EOF
            
            chmod +x "$git_credential_helper"
            git config --global credential.helper "$git_credential_helper"
            
            echo "Git credentials stored in encrypted file."
            return 0
        fi
    else
        echo "Error: Unsupported operating system for Git credential setup."
        return 1
    fi
}

# Check and configure Git user.name and user.email if needed
check_and_configure_git_user_info() {
    local git_user_name=$(git config --global user.name)
    local git_user_email=$(git config --global user.email)
    local need_setup=false
    
    if [[ -z "$git_user_name" || -z "$git_user_email" ]]; then
        need_setup=true
    fi
    
    if [[ "$need_setup" == "true" ]]; then
        gum style \
            --border rounded \
            --border-foreground 240 \
            --padding "1 2" \
            --margin "1 0" \
            --width 96 \
            "$(gum style --foreground 141 --bold 'Git User Configuration')

👉  Your Git user.name and/or user.email are not configured.
    These are needed for making commits to Git repositories.
"
        echo ""
        
        if gum confirm "Do you want to configure Git user information now?" --default=true; then
            # Configure git user.name if needed
            if [[ -z "$git_user_name" ]]; then
                while true; do
                    git_user_name=$(gum input --prompt "Enter your full name for Git commits: " --placeholder "John Doe")
                    
                    if [[ "$git_user_name" == "exit" || "$git_user_name" == "quit" ]]; then
                        echo "Skipping Git user name configuration."
                        break
                    fi
                    
                    if [[ -z "$git_user_name" ]]; then
                        echo "Name cannot be empty. Please try again or type 'exit' to skip."
                        continue
                    fi
                    
                    git config --global user.name "$git_user_name"
                    echo "Git user.name set to: $git_user_name"
                    break
                done
            fi
            
            # Configure git user.email if needed
            if [[ -z "$git_user_email" ]]; then
                while true; do
                    git_user_email=$(gum input --prompt "Enter your email for Git commits: " --placeholder "john.doe@example.com")
                    
                    if [[ "$git_user_email" == "exit" || "$git_user_email" == "quit" ]]; then
                        echo "Skipping Git user email configuration."
                        break
                    fi
                    
                    if [[ -z "$git_user_email" ]]; then
                        echo "Email cannot be empty. Please try again or type 'exit' to skip."
                        continue
                    fi
                    
                    # Basic email validation
                    if [[ ! "$git_user_email" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
                        echo "Invalid email format. Please try again."
                        continue
                    fi
                    
                    git config --global user.email "$git_user_email"
                    echo "Git user.email set to: $git_user_email"
                    break
                done
            fi
            
            echo "Git user configuration complete."
        else
            echo "Skipping Git user configuration."
        fi
    fi
}

# this explains how we create a token
show_git_instructions() {
    gum style \
        --border rounded \
        --border-foreground 240 \
        --padding "1 2" \
        --margin "1 0" \
        --width 96 \
        "$(gum style --foreground 141 --bold 'Setting up Git credentials')

👉  You'll need your GitHub username and password or personal access token.

👉  For GitHub, a personal access token is recommended:

    1.  Go to $(gum style --foreground 212 --underline 'https://github.com/settings/tokens')
    2.  Click 'Generate new token' (classic)
    3.  Add a note like 'Git Authentication'
    4.  Select appropriate scopes:
         •  $(gum style --foreground 212 'repo')
    5.  Click 'Generate token'
    6.  Copy the generated token (this will be your password)"

    echo ""
}

# wilkommen / bienvenue / witamy / welcome
show_welcome_message() {
    gum style \
        --border rounded \
        --border-foreground 240 \
        --padding "1 2" \
        --margin "1 0" \
        --width 96 \
        "$(gum style --foreground 141 --bold 'F l o x  GitHub & Git Authentication Setup Wizard')

👉  This wizard will guide you through setting up authentication for:

    1.  GitHub CLI (gh) commands
    2.  Git operations (push, pull, clone, etc.)

👉  You will need to provide:

    •  Your GitHub Personal Access Token with appropriate permissions
    •  Your Git credentials for GitHub

Your credentials will be securely stored and used to authenticate GitHub CLI and Git commands."

    echo ""
}

# this is our completion message
show_completion_message() {
    local gh_storage_method="$1"
    local needs_wrapper="$2"
    local git_configured="$3"
    
    local wrapper_status="will use a wrapper"
    
    if [[ "$needs_wrapper" == "false" ]]; then
        wrapper_status="will authenticate directly"
    fi
    
    local git_status="Git credentials were not configured"
    if [[ "$git_configured" == "true" ]]; then
        git_status="Git credentials successfully configured"
    fi
    
    gum style \
        --border rounded \
        --border-foreground 240 \
        --padding "1 2" \
        --margin "1 0" \
        --width 96 \
        "$(gum style --foreground 141 --bold 'F l o x  GitHub & Git Integration Complete!')

👉  Setup completed successfully!

👉  Configuration Details:
    GitHub CLI token storage: $(gum style --foreground 212 "$gh_storage_method")
    GitHub CLI: $wrapper_status
    Git: $git_status

👉  You can now use these commands:
    $(gum style --foreground 212 'gh repo create')      Create a new repository
    $(gum style --foreground 212 'git push')            Push to GitHub repositories
    $(gum style --foreground 212 'git pull')            Pull from GitHub repositories

Your credentials are securely stored and will be automatically used for authentication."

    echo ""
}

# this explains how we create a token
show_token_instructions() {
    gum style \
        --border rounded \
        --border-foreground 240 \
        --padding "1 2" \
        --margin "1 0" \
        --width 96 \
        "$(gum style --foreground 141 --bold 'Creating a GitHub Personal Access Token')

👉  To create a GitHub Personal Access Token:

    1.  Go to $(gum style --foreground 212 --underline 'https://github.com/settings/tokens')
    2.  Click 'Generate new token' (classic)
    3.  Add a note like 'Flox CLI Integration'
    4.  Select appropriate scopes:
         •  $(gum style --foreground 212 'repo')
         •  $(gum style --foreground 212 'read:org')
    5.  Click 'Generate token'
    6.  Copy the generated token"

    echo ""
}

# this explains how we create a token
show_git_instructions() {
    gum style \
        --border rounded \
        --border-foreground 240 \
        --padding "1 2" \
        --margin "1 0" \
        --width 96 \
        "$(gum style --foreground 141 --bold 'Setting up Git credentials')

👉  You'll need your GitHub username and password or personal access token.

👉  For GitHub, a personal access token is recommended:

    1.  Go to $(gum style --foreground 212 --underline 'https://github.com/settings/tokens')
    2.  Click 'Generate new token' (classic)
    3.  Add a note like 'Git Authentication'
    4.  Select appropriate scopes:
         •  $(gum style --foreground 212 'repo')
    5.  Click 'Generate token'
    6.  Copy the generated token (this will be your password)"

    echo ""
}

# wilkommen / bienvenue / witamy / welcome
show_welcome_message() {
    gum style \
        --border rounded \
        --border-foreground 240 \
        --padding "1 2" \
        --margin "1 0" \
        --width 96 \
        "$(gum style --foreground 141 --bold 'F l o x  GitHub & Git Authentication Setup Wizard')

👉  This wizard will guide you through setting up authentication for:

    1.  GitHub CLI (gh) commands
    2.  Git operations (push, pull, clone, etc.)

👉  You will need to provide:

    •  Your GitHub Personal Access Token with appropriate permissions
    •  Your Git credentials for GitHub

Your credentials will be securely stored and used to authenticate GitHub CLI and Git commands."

    echo ""
}

# this is our completion message
show_completion_message() {
    local gh_storage_method="$1"
    local needs_wrapper="$2"
    local git_configured="$3"
    
    local wrapper_status="will use a wrapper"
    
    if [[ "$needs_wrapper" == "false" ]]; then
        wrapper_status="will authenticate directly"
    fi
    
    local git_status="Git credentials were not configured"
    if [[ "$git_configured" == "true" ]]; then
        git_status="Git credentials successfully configured"
    fi
    
    gum style \
        --border rounded \
        --border-foreground 240 \
        --padding "1 2" \
        --margin "1 0" \
        --width 96 \
        "$(gum style --foreground 141 --bold 'F l o x  GitHub & Git Integration Complete!')

👉  Setup completed successfully!

👉  Configuration Details:
    GitHub CLI token storage: $(gum style --foreground 212 "$gh_storage_method")
    GitHub CLI: $wrapper_status
    Git: $git_status

👉  You can now use these commands:
    $(gum style --foreground 212 'gh repo create')      Create a new repository
    $(gum style --foreground 212 'git push')            Push to GitHub repositories
    $(gum style --foreground 212 'git pull')            Pull from GitHub repositories

Your credentials are securely stored and will be automatically used for authentication."

    echo ""
}

# main setup function
setup_github_integration() {
    # exit the shell if user opts not to continue
    exit_shell() {
        echo "Exiting the shell. Please run 'flox activate' to restart the wizard."
        exit 1
    }
    
    # check for existing token
    if check_existing_token; then
        return 0
    fi
    
    # github token setup wizard
    clear
    show_welcome_message
    
    # prompt to continue with the setup wizard
    if ! gum confirm "Do you want to continue?" --default=true; then
        exit_shell
    fi
    
    echo "Type 'exit' or 'quit' at any prompt to exit the wizard."
    
    term_width=$(tput cols)
    if [[ $term_width -gt 70 ]]; then
        term_width=70
    fi
    
    # check for skip command
    check_skip() {
        if [[ "$1" == "exit" || "$1" == "quit" ]]; then
            echo "Skipping the wizard. You can run 'flox activate' again to restart."
            return 1
        fi
        return 0
    }
    
    # display token creation instructions
    show_token_instructions
    
    # collect github token
    local github_token=""
    while true; do
        github_token=$(gum input --prompt "Enter your GitHub Personal Access Token: " --password --width "$term_width")
        
        if ! check_skip "$github_token"; then
            return 1
        fi
        
        if [[ -z "$github_token" ]]; then
            echo "Token cannot be empty. Please try again."
            continue
        fi
        
        echo "Validating token..."
        if validate_github_token "$github_token"; then
            echo "Token validation successful!"
            break
        else
            echo "Invalid token. Please check and try again."
        fi
    done
    
    # Variable to track if git credentials were configured
    local git_configured="false"
    
    # Ask if user wants to set up Git credentials
    if gum confirm "Do you also want to set up Git credentials for GitHub?" --default=true; then
        # Display Git credentials setup instructions
        show_git_instructions
        
        # Collect Git username
        local git_username=""
        while true; do
            git_username=$(gum input --prompt "Enter your GitHub username: " --width "$term_width")
            
            if ! check_skip "$git_username"; then
                break
            fi
            
            if [[ -z "$git_username" ]]; then
                echo "Username cannot be empty. Please try again."
                continue
            fi
            
            break
        done
        
        # If we have a valid username, collect password/token
        if [[ -n "$git_username" && "$git_username" != "exit" && "$git_username" != "quit" ]]; then
            # Collect Git password/token
            local git_password=""
            
            # Ask if they want to use the same token for Git
            if gum confirm "Do you want to use the same token for Git authentication?" --default=true; then
                git_password="$github_token"
            else {
                while true; do
                    git_password=$(gum input --prompt "Enter your GitHub password or token: " --password --width "$term_width")
                    
                    if ! check_skip "$git_password"; then
                        break
                    fi
                    
                    if [[ -z "$git_password" ]]; then
                        echo "Password cannot be empty. Please try again."
                        continue
                    fi
                    
                    break
                done
            }
            fi
            
            # Configure Git credentials if we have both username and password
            if [[ -n "$git_username" && -n "$git_password" && "$git_username" != "exit" && "$git_username" != "quit" && "$git_password" != "exit" && "$git_password" != "quit" ]]; then
                if configure_git_credentials "$git_username" "$git_password"; then
                    git_configured="true"
                fi
            fi
        fi
    fi
    
    # try to store GitHub token in system keyring first
    echo "Attempting to store GitHub token in system keyring..."
    if store_github_token "$github_token"; then
        # source config to get NEEDS_WRAPPER
        source "$CONFIG_FILE"
        
        if [[ "$NEEDS_WRAPPER" == "true" ]]; then
            # remove any existing gh auth
            gh auth logout --hostname github.com 2>/dev/null || true
            
            # create shell wrappers
            echo "Creating shell wrappers..."
            create_shell_wrappers
            
            show_completion_message "system keyring" "true" "$git_configured"
        else
            # No wrapper needed, make sure we don't have any leftover wrapper files
            rm -f "$BASH_WRAPPER" "$ZSH_WRAPPER" "$FISH_WRAPPER" 2>/dev/null || true
            
            show_completion_message "system keyring" "false" "$git_configured"
        fi
        return 0
    else
        # fallback to encrypted file if keyring fails
        echo "Unable to use system keyring/keychain."
        
        if gum confirm "Do you want to store your GitHub token in an encrypted local file?" --default=true; then
            echo "Storing token in encrypted file..."
            store_github_token_encrypted "$github_token"
            
            # remove any existing gh auth
            gh auth logout --hostname github.com 2>/dev/null || true
            
            # create shell wrappers
            echo "Creating shell wrappers..."
            create_shell_wrappers
            
            show_completion_message "encrypted file" "true" "$git_configured"
            return 0
        else
            echo "No storage method selected. GitHub integration setup cancelled."
            exit_shell
        fi
    fi
}

# create cache directory if it doesn't exist
mkdir -p "$(dirname "$CONFIG_FILE")"

# call the main setup function
setup_github_integration
'''

## ... sourced by _your shell_ when you run 'flox activate'.
## -------------------------------------------------------------------
[profile]
# common = '''
#   gum style \
#   --foreground 212 --border-foreground 212 --border double \
#   --align center --width 50 --margin "1 2" --padding "2 4" \
#     $INTRO_MESSAGE
# '''
## Shell specific profiles go here:
bash = '''
if [[ -f "$HOME/.cache/flox/ghcli/github_config" ]]; then
    source "$HOME/.cache/flox/ghcli/github_config"
    if [[ "$NEEDS_WRAPPER" == "true" && -f "$HOME/.cache/flox/ghcli/gh_wrapper.bash" ]]; then
        source "$HOME/.cache/flox/ghcli/gh_wrapper.bash"
    fi
fi

readme() {
  if [[ "$1" == "--refresh" ]] || [ ! -s "$FLOX_ENV_PROJECT/README.md" ]; then
    curl -sL "https://raw.githubusercontent.com/barstoolbluz/ghcli/main/README.md" > "$FLOX_ENV_PROJECT/README.md" 2>/dev/null
    echo "README updated from GitHub."
  fi
  bat --language markdown "$FLOX_ENV_PROJECT/README.md" 2>/dev/null
}
'''

zsh = '''
if [[ -f "$HOME/.cache/flox/ghcli/github_config" ]]; then
    source "$HOME/.cache/flox/ghcli/github_config"
    if [[ "$NEEDS_WRAPPER" == "true" && -f "$HOME/.cache/flox/ghcli/gh_wrapper.zsh" ]]; then
        source "$HOME/.cache/flox/ghcli/gh_wrapper.zsh"
    fi
fi

readme() {
  if [[ "$1" == "--refresh" ]] || [ ! -s "$FLOX_ENV_PROJECT/README.md" ]; then
    curl -sL "https://raw.githubusercontent.com/barstoolbluz/ghcli/main/README.md" > "$FLOX_ENV_PROJECT/README.md" 2>/dev/null
    echo "README updated from GitHub."
  fi
  bat --language markdown "$FLOX_ENV_PROJECT/README.md" 2>/dev/null
}
'''

fish = '''
if test -f "$HOME/.cache/flox/ghcli/github_config"
    set -l needs_wrapper (grep "NEEDS_WRAPPER" "$HOME/.cache/flox/ghcli/github_config" | cut -d '=' -f2)
    if test "$needs_wrapper" = "true"; and test -f "$HOME/.cache/flox/ghcli/gh_wrapper.fish"
        source $HOME/.cache/flox/ghcli/gh_wrapper.fish
    end
end

function readme
  if test "$argv[1]" = "--refresh"; or test ! -s "$FLOX_ENV_PROJECT/README.md"
    curl -sL "https://raw.githubusercontent.com/barstoolbluz/ghcli/main/README.md" > "$FLOX_ENV_PROJECT/README.md" 2>/dev/null
    echo "README updated from GitHub."
  fi
  bat --language markdown "$FLOX_ENV_PROJECT/README.md" 2>/dev/null
end
'''

## Services ----------------------------------------------------------
##  $ flox services start             <- Starts all services
##  $ flox services status            <- Status of running services
##  $ flox activate --start-services  <- Activates & starts all
## -------------------------------------------------------------------
[services]
# myservice.command = "python3 -m http.server"


## Other Environment Options -----------------------------------------
[options]
# Systems that environment is compatible with
systems = [
  "aarch64-darwin",
  "aarch64-linux",
  "x86_64-darwin",
  "x86_64-linux",
]
# Uncomment to disable CUDA detection.
# cuda-detection = false

## Flox Environment Manifest -----------------------------------------
##
##   _Everything_ you need to know about the _manifest_ is here:
##
##               https://flox.dev/docs/concepts/manifest
##
## -------------------------------------------------------------------
# Flox manifest version managed by Flox CLI
version = 1


## Install Packages --------------------------------------------------
##  $ flox install gum  <- puts a package in [install] section below
##  $ flox search gum   <- search for a package
##  $ flox show gum     <- show all versions of a package
## -------------------------------------------------------------------
[install]
neo4j.pkg-path = "neo4j"
gum.pkg-path = "gum"
firefox.pkg-path = "firefox"
firefox.systems = ["aarch64-linux", "x86_64-linux"]
# gum.pkg-path = "gum"
# gum.version = "^0.14.5"


## Environment Variables ---------------------------------------------
##  ... available for use in the activated environment
##      as well as [hook], [profile] scripts and [services] below.
## -------------------------------------------------------------------
[vars]

## Activation Hook ---------------------------------------------------
##  ... run by _bash_ shell when you run 'flox activate'.
## -------------------------------------------------------------------
[hook]
on-activate = '''
# Set up initial defaults
export NEO4J_DIR="${FLOX_ENV_CACHE}/neo4j"
export CONFIG_FILE="${FLOX_ENV_CACHE}/neo4j.config"

# Default values
DEFAULT_NEO4J_HOST="localhost"
DEFAULT_NEO4J_PORT="7687"
DEFAULT_NEO4J_HTTP_PORT="7474"
DEFAULT_NEO4J_USER="neo4j"
DEFAULT_NEO4J_PASSWORD="neo4jpass"
DEFAULT_NEO4J_DIR="${FLOX_ENV_CACHE}/neo4j"

# Initialize with defaults
export NEO4J_HOST="${NEO4J_HOST:-$DEFAULT_NEO4J_HOST}"
export NEO4J_PORT="${NEO4J_PORT:-$DEFAULT_NEO4J_PORT}"
export NEO4J_HTTP_PORT="${NEO4J_HTTP_PORT:-$DEFAULT_NEO4J_HTTP_PORT}"
export NEO4J_USER="${NEO4J_USER:-$DEFAULT_NEO4J_USER}"
export NEO4J_PASSWORD="${NEO4J_PASSWORD:-$DEFAULT_NEO4J_PASSWORD}"
export NEO4J_DIR="${NEO4J_DIR:-$DEFAULT_NEO4J_DIR}"
export NEO4J_AUTH="${NEO4J_USER}/${NEO4J_PASSWORD}"

# Debug flag
export NEO4J_DEBUG="false"

# Check if this is first run
check_first_run() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        return 0 # True, first run
    else
        return 1 # False, not first run
    fi
}

# Load existing config
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
    else
        # Set defaults if no config exists
        export NEO4J_HOST="$DEFAULT_NEO4J_HOST"
        export NEO4J_PORT="$DEFAULT_NEO4J_PORT"
        export NEO4J_HTTP_PORT="$DEFAULT_NEO4J_HTTP_PORT"
        export NEO4J_USER="$DEFAULT_NEO4J_USER"
        export NEO4J_PASSWORD="$DEFAULT_NEO4J_PASSWORD"
        export NEO4J_DIR="$DEFAULT_NEO4J_DIR"
        export NEO4J_AUTH="${NEO4J_USER}/${NEO4J_PASSWORD}"
    fi
}

# Save configuration
save_config() {
    mkdir -p "$(dirname "$CONFIG_FILE")"
    cat > "$CONFIG_FILE" << EOF
# Neo4j configuration - Generated on $(date)
export NEO4J_HOST="$NEO4J_HOST"
export NEO4J_PORT="$NEO4J_PORT"
export NEO4J_HTTP_PORT="$NEO4J_HTTP_PORT"
export NEO4J_USER="$NEO4J_USER"
export NEO4J_PASSWORD="$NEO4J_PASSWORD"
export NEO4J_DIR="$NEO4J_DIR"
export NEO4J_AUTH="${NEO4J_USER}/${NEO4J_PASSWORD}"
export NEO4J_DEBUG="$NEO4J_DEBUG"

## BEGIN ACTIVATION HOOK ##
$(declare -f debug_log)
$(declare -f check_first_run)
$(declare -f load_config)
$(declare -f save_config)
$(declare -f prompt_for_config)
$(declare -f update_dependent_vars)
$(declare -f initialize_neo4j)
$(declare -f create_config_file)
$(declare -f start_neo4j)
$(declare -f stop_neo4j)
$(declare -f reconfigure_neo4j)
$(declare -f first_run_setup)
$(declare -f display_neo4j_config_ui)
$(declare -f neo4j_setup)
$(declare -f show_neo4j_help)
$(declare -f main)
## END ACTIVATION HOOK ##
EOF
    chmod 644 "$CONFIG_FILE"
}

# Configuration prompt
prompt_for_config() {
    # Ensure defaults are set
    DEFAULT_NEO4J_HOST="localhost"
    DEFAULT_NEO4J_PORT="7687"
    DEFAULT_NEO4J_HTTP_PORT="7474"
    DEFAULT_NEO4J_USER="neo4j"
    DEFAULT_NEO4J_PASSWORD="neo4jpass"
    DEFAULT_NEO4J_DIR="${FLOX_ENV_CACHE}/neo4j"

    echo ""
    if gum confirm "$(gum style --foreground 240 'Would you like to customize your Neo4j configuration?')" --default=false; then
        echo "$(gum style --foreground 240 'Press Enter to accept the default values shown in [brackets]')"
        echo ""
        NEO4J_HOST=$(gum input --placeholder "[${DEFAULT_NEO4J_HOST}]" --value "$DEFAULT_NEO4J_HOST" --prompt "Host: ")
        NEO4J_PORT=$(gum input --placeholder "[${DEFAULT_NEO4J_PORT}] (Bolt protocol)" --value "$DEFAULT_NEO4J_PORT" --prompt "Bolt Port: ")
        NEO4J_HTTP_PORT=$(gum input --placeholder "[${DEFAULT_NEO4J_HTTP_PORT}] (Browser interface)" --value "$DEFAULT_NEO4J_HTTP_PORT" --prompt "HTTP Port: ")
        NEO4J_USER=$(gum input --placeholder "[${DEFAULT_NEO4J_USER}]" --value "$DEFAULT_NEO4J_USER" --prompt "Username: ")
        NEO4J_PASSWORD=$(gum input --placeholder "[${DEFAULT_NEO4J_PASSWORD}]" --value "$DEFAULT_NEO4J_PASSWORD" --prompt "Password: " --password)
        
        if gum confirm "Use default directory for Neo4j data?" --default=true; then
            NEO4J_DIR="$DEFAULT_NEO4J_DIR"
        else
            NEO4J_DIR=$(gum input --placeholder "[${DEFAULT_NEO4J_DIR}]" --value "$DEFAULT_NEO4J_DIR" --prompt "Neo4j Data Directory: ")
        fi
    else
        echo "$(gum style --foreground 240 'Using default configuration:')"
        echo "$(gum style --foreground 240 "  Host: ${DEFAULT_NEO4J_HOST}")"
        echo "$(gum style --foreground 240 "  Bolt Port: ${DEFAULT_NEO4J_PORT}")"
        echo "$(gum style --foreground 240 "  HTTP Port: ${DEFAULT_NEO4J_HTTP_PORT}")"
        echo "$(gum style --foreground 240 "  Username: ${DEFAULT_NEO4J_USER}")"
        echo "$(gum style --foreground 240 "  Password: ${DEFAULT_NEO4J_PASSWORD}")"
        echo "$(gum style --foreground 240 "  Data Directory: ${DEFAULT_NEO4J_DIR}")"
        echo ""
        
        NEO4J_HOST="$DEFAULT_NEO4J_HOST"
        NEO4J_PORT="$DEFAULT_NEO4J_PORT"
        NEO4J_HTTP_PORT="$DEFAULT_NEO4J_HTTP_PORT"
        NEO4J_USER="$DEFAULT_NEO4J_USER"
        NEO4J_PASSWORD="$DEFAULT_NEO4J_PASSWORD"
        NEO4J_DIR="$DEFAULT_NEO4J_DIR"
    fi
    
    export NEO4J_HOST NEO4J_PORT NEO4J_HTTP_PORT NEO4J_USER NEO4J_PASSWORD NEO4J_DIR
    export NEO4J_AUTH="${NEO4J_USER}/${NEO4J_PASSWORD}"
    
    save_config
}

# Debug logging
debug_log() {
    if [[ "$NEO4J_DEBUG" == "true" ]]; then
        echo "$@"
    fi
}

# Update dependent variables
update_dependent_vars() {
    if [[ ! "$NEO4J_DIR" = /* ]]; then
        NEO4J_DIR="$(pwd)/$NEO4J_DIR"
        export NEO4J_DIR
    fi
    
    export NEO4J_DATA="$NEO4J_DIR/data"
    export NEO4J_LOGS="$NEO4J_DIR/logs"
    export NEO4J_CONF="$NEO4J_DIR/conf"
    export NEO4J_RUN="$NEO4J_DIR/run"
    
    debug_log "Configuration paths:"
    debug_log "  NEO4J_DIR: $NEO4J_DIR"
    debug_log "  NEO4J_DATA: $NEO4J_DATA"
    debug_log "  NEO4J_CONF: $NEO4J_CONF"
}

# Initialize Neo4j
initialize_neo4j() {
    mkdir -p "$NEO4J_DATA" "$NEO4J_LOGS" "$NEO4J_CONF" "$NEO4J_RUN"
    chmod 700 "$NEO4J_DATA" "$NEO4J_LOGS" "$NEO4J_CONF" "$NEO4J_RUN"
    
    return 0
}

# Create Neo4j config file
create_config_file() {
    cat > "$NEO4J_CONF/neo4j.conf" << EOF
dbms.default_listen_address=0.0.0.0
dbms.connector.bolt.listen_address=:${NEO4J_PORT}
dbms.connector.http.listen_address=:${NEO4J_HTTP_PORT}
dbms.directories.data=$NEO4J_DATA
dbms.directories.logs=$NEO4J_LOGS
dbms.security.auth_enabled=true
EOF
    return 0
}

# Start Neo4j
start_neo4j() {
    NEO4J_HOME="$NEO4J_DIR" neo4j start
    return $?
}

# Stop Neo4j
stop_neo4j() {
    NEO4J_HOME="$NEO4J_DIR" neo4j stop
    return $?
}

# Reconfigure Neo4j
reconfigure_neo4j() {
    rm -f "$CONFIG_FILE"
    first_run_setup
    neo4j_setup
}

# First run setup
first_run_setup() {
    if check_first_run; then
        display_neo4j_config_ui
    else
        load_config
    fi
    
    update_dependent_vars
}

# Display configuration UI
display_neo4j_config_ui() {
    clear
    
    gum style \
        --border rounded \
        --border-foreground 240 \
        --padding "1 2" \
        --margin "1 0" \
        --width 70 \
        "$(gum style --foreground 27 --bold 'Neo4j Configuration')
        
$(gum style --foreground 240 'First-time setup for your Neo4j graph database')"
    
    prompt_for_config
}

# Neo4j setup
neo4j_setup() {
    debug_log "Setting up Neo4j..."
    
    initialize_neo4j || { echo "Failed to initialize Neo4j"; return 1; }
    create_config_file || { echo "Failed to create configuration file"; return 1; }
    
    debug_log "Neo4j setup completed successfully"
    return 0
}

# Help message
show_neo4j_help() {
    # Determine display host
    local display_host
    if [[ "$NEO4J_HOST" == "0.0.0.0" ]]; then
        display_host="localhost"
    else
        display_host="$NEO4J_HOST"
    fi
    
    # Format the URL
    local url="http://${display_host}:${NEO4J_HTTP_PORT}"
    
    # Option 1: Using gum format with gum join for the box
    # Create the border box first
    gum style \
        --border rounded \
        --border-foreground 240 \
        --padding "1 2" \
        --margin "1 0" \
        --width 70 \
        "$(gum style --foreground 141 --bold 'This is a  F l o x  Neo4j Environment')

Start Neo4j at activation:
ðŸ‘‰  $(gum style --foreground 212 'flox activate -s')

Start Neo4j post activation:
ðŸ‘‰  $(gum style --foreground 212 'neo4jstart')

Stop Neo4j post activation:
ðŸ‘‰  $(gum style --foreground 212 'neo4jstop')

Restart Neo4j post activation:
ðŸ‘‰  $(gum style --foreground 212 'neo4jrestart')

Reconfigure Neo4j post activation:
ðŸ‘‰  $(gum style --foreground 212 'neo4jconfigure')

Connect to Neo4j (Browser):
ðŸ‘‰  $(gum style --foreground 212 "$url")"

    echo ""
}

# Main function
main() {
    first_run_setup
    neo4j_setup
    show_neo4j_help
}

# Run main
main
'''

[profile]
bash = '''
source "${FLOX_ENV_CACHE}/neo4j.config" 2>/dev/null || true
neo4jstart() { flox services start neo4j; }
neo4jstop() { flox services stop neo4j; }
neo4jrestart() { flox services restart neo4j; }
neo4jconfigure() {
  flox services stop neo4j
  source "${FLOX_ENV_CACHE}/neo4j.config" 2>/dev/null || true
  reconfigure_neo4j
  flox services start neo4j
}
export -f neo4jstart neo4jstop neo4jrestart neo4jconfigure
unset -f debug_log check_first_run load_config save_config prompt_for_config
unset -f update_dependent_vars initialize_neo4j create_config_file
unset -f start_neo4j stop_neo4j create_database display_neo4j_config_ui
unset -f first_run_setup neo4j_setup show_neo4j_help main
'''

zsh = '''
source "${FLOX_ENV_CACHE}/neo4j.config" 2>/dev/null || true
"neo4jstart() { flox services start neo4j; }"
"neo4jstop() { flox services stop neo4j; }"
"neo4jrestart() { flox services restart neo4j; }"
"neo4jconfigure() {
  flox services stop neo4j
  source "${FLOX_ENV_CACHE}/neo4j.config" 2>/dev/null || true
  reconfigure_neo4j
  flox services start neo4j
}"
export neo4jstart neo4jstop neo4jrestart neo4jconfigure
unset "debug_log" "check_first_run" "load_config" "save_config" "prompt_for_config"
unset "update_dependent_vars" "initialize_neo4j" "create_config_file"
unset "start_neo4j" "stop_neo4j" "create_database" "display_neo4j_config_ui"
unset "first_run_setup" "neo4j_setup" "show_neo4j_help" "main"
'''

## Services ----------------------------------------------------------
##  $ flox services start             <- Starts all services
##  $ flox services status            <- Status of running services
##  $ flox activate --start-services  <- Activates & starts all
## -------------------------------------------------------------------
[services]
neo4j.command = "NEO4J_HOME=$NEO4J_DIR neo4j console"

## Other Environment Options -----------------------------------------
[options]
# Systems that environment is compatible with
systems = [
  "aarch64-darwin",
  "aarch64-linux",
  "x86_64-darwin",
  "x86_64-linux",
]
# Uncomment to disable CUDA detection.
# cuda-detection = false

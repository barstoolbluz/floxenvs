## Flox Environment Manifest -----------------------------------------
##
##   _Everything_ you need to know about the _manifest_ is here:
##
##               https://flox.dev/docs/concepts/manifest
##
## -------------------------------------------------------------------
# Flox manifest version managed by Flox CLI
version = 1


## Install Packages --------------------------------------------------
##  $ flox install gum  <- puts a package in [install] section below
##  $ flox search gum   <- search for a package
##  $ flox show gum     <- show all versions of a package
## -------------------------------------------------------------------
[install]
kind.pkg-path = "kind"
kubectl.pkg-path = "kubectl"
k9s.pkg-path = "k9s"
gum.pkg-path = "gum"
jq.pkg-path = "jq"
helm.pkg-path = "helm"
helm.systems = ["aarch64-linux", "x86_64-linux"]
coreutils.pkg-path = "coreutils"
# gum.pkg-path = "gum"
# gum.version = "^0.14.5"


## Environment Variables ---------------------------------------------
##  ... available for use in the activated environment
##      as well as [hook], [profile] scripts and [services] below.
## -------------------------------------------------------------------
[vars]
# INTRO_MESSAGE = "It's gettin' Flox in here"


## Activation Hook ---------------------------------------------------
##  ... run by _bash_ shell when you run 'flox activate'.
## -------------------------------------------------------------------
[hook]
on-activate = '''
# Show the welcome message
show_kind_help() {
    # Get current cluster context if available
    local current_context
    if command -v kubectl >/dev/null 2>&1; then
        current_context=$(kubectl config current-context 2>/dev/null || echo "None")
    else
        current_context="None"
    fi

    # Get list of KIND clusters
    local kind_clusters
    if command -v kind >/dev/null 2>&1; then
        kind_clusters=$(kind get clusters 2>/dev/null)
        if [ -z "$kind_clusters" ]; then
            kind_clusters="No clusters found"
        fi
    else
        kind_clusters="KIND not available"
    fi

    # Create the help message with Gum styling
    gum style \
        --border rounded \
        --border-foreground 240 \
        --padding "1 2" \
        --margin "1 0" \
        --width 84 \
        "$(gum style --foreground 141 --bold 'This is a  F l o x  KIND Kubernetes Environment')

ðŸ‘‰  Create KIND Cluster:
    $(gum style --foreground 212 'bootstrap')                           Interactive KIND cluster creation wizard
    $(gum style --foreground 212 'create-cluster NAME')                 Create KIND cluster with existing config

ðŸ‘‰  Manage Kubernetes:
    $(gum style --foreground 212 'kubectl')                             Control Kubernetes clusters
    $(gum style --foreground 212 'k9s')                                 Terminal UI for Kubernetes
    $(gum style --foreground 212 'helm')                                Kubernetes package manager
    
ðŸ‘‰  Built-in Environment Commands:
    $(gum style --foreground 212 'delete-cluster NAME')                 Delete a KIND cluster
    $(gum style --foreground 212 'kind get clusters')                   List all KIND clusters
    $(gum style --foreground 212 'kubectl config get-contexts')         Show available contexts
    
ðŸ‘‰  Environment Details:
    Current Context: $(gum style --foreground 212 "${current_context}")
    KIND Clusters:   $(gum style --foreground 212 "${kind_clusters}")"

    echo ""
}

# Function to download shell files from GitHub silently
download_shell_files() {
    # Create the cache directory if it doesn't exist
    mkdir -p "$FLOX_ENV_CACHE" >/dev/null 2>&1
    
    # GitHub raw content base URL
    local base_url="https://raw.githubusercontent.com/barstoolbluz/floxenvs/main/kind/.flox/cache"
    
    # Download files silently
    curl -s -f -o "$FLOX_ENV_CACHE/kind_wizard.bash" "$base_url/kind_wizard.bash" >/dev/null 2>&1
    [ -f "$FLOX_ENV_CACHE/kind_wizard.bash" ] && chmod +x "$FLOX_ENV_CACHE/kind_wizard.bash" >/dev/null 2>&1
    
    curl -s -f -o "$FLOX_ENV_CACHE/kind_wizard.zsh" "$base_url/kind_wizard.zsh" >/dev/null 2>&1
    [ -f "$FLOX_ENV_CACHE/kind_wizard.zsh" ] && chmod +x "$FLOX_ENV_CACHE/kind_wizard.zsh" >/dev/null 2>&1
    
    curl -s -f -o "$FLOX_ENV_CACHE/kind_wizard.fish" "$base_url/kind_wizard.fish" >/dev/null 2>&1
    [ -f "$FLOX_ENV_CACHE/kind_wizard.fish" ] && chmod +x "$FLOX_ENV_CACHE/kind_wizard.fish" >/dev/null 2>&1
}

# Download shell files if they don't exist
if [ ! -f "$FLOX_ENV_CACHE/kind_wizard.bash" ] || \
   [ ! -f "$FLOX_ENV_CACHE/kind_wizard.zsh" ] || \
   [ ! -f "$FLOX_ENV_CACHE/kind_wizard.fish" ]; then
    download_shell_files >/dev/null 2>&1
fi

# Run the help message
show_kind_help

# Check if KIND is available
if command -v kind >/dev/null 2>&1; then
    # Check if any KIND clusters exist
    if [ -z "$(kind get clusters 2>/dev/null)" ]; then
        # No clusters exist, source the Bash wizard and prompt to create one
        gum style --foreground 212 --bold "No KIND clusters detected. Let's set one up!"
        if [ -f "$FLOX_ENV_CACHE/kind_wizard.bash" ]; then
            source "$FLOX_ENV_CACHE/kind_wizard.bash"
            bootstrap
        fi
    fi
fi
'''

[profile]
bash = '''
# Source the bootstrap function
if [ -f "$FLOX_ENV_CACHE/kind_wizard.bash" ]; then
    source "$FLOX_ENV_CACHE/kind_wizard.bash"
fi

create-cluster() {
    local cluster_name=${1:-$(gum input --placeholder "cluster name")}
    kind create cluster --name "$cluster_name" --config "${cluster_name}-kind.yaml"
}

delete-cluster() {
    local cluster_name=${1:-$(gum input --placeholder "cluster to delete")}
    kind delete cluster --name "$cluster_name"
}

readme() {
  local readme_path="$FLOX_ENV_CACHE/README.md"
  [[ "$1" == "--refresh" || ! -f "$readme_path" ]] && curl -s -o "$readme_path" "https://raw.githubusercontent.com/barstoolbluz/floxenvs/main/kind/README.md" 2>/dev/null
  command -v bat &>/dev/null && bat --paging=always "$readme_path" 2>/dev/null || cat "$readme_path" 2>/dev/null
}
'''

zsh = '''
# Source the kind_wizard function
if [ -f "$FLOX_ENV_CACHE/kind_wizard.zsh" ]; then
    source "$FLOX_ENV_CACHE/kind_wizard.zsh"
fi

create-cluster() {
    local cluster_name=${1:-$(gum input --placeholder "cluster name")}
    kind create cluster --name "$cluster_name" --config "${cluster_name}-kind.yaml"
}

delete-cluster() {
    local cluster_name=${1:-$(gum input --placeholder "cluster to delete")}
    kind delete cluster --name "$cluster_name"
}

readme() {
  local readme_path="$FLOX_ENV_CACHE/README.md"
  [[ "$1" == "--refresh" || ! -f "$readme_path" ]] && curl -s -o "$readme_path" "https://raw.githubusercontent.com/barstoolbluz/floxenvs/main/kind/README.md" 2>/dev/null
  command -v bat &>/dev/null && bat --paging=always "$readme_path" 2>/dev/null || cat "$readme_path" 2>/dev/null
}
'''

fish = '''
# Source the kind_wizard function
if test -f "$FLOX_ENV_CACHE/kind_wizard.fish"
    source "$FLOX_ENV_CACHE/kind_wizard.fish"
end

function create-cluster
    set cluster_name $argv[1]
    if test -z "$cluster_name"
        set cluster_name (gum input --placeholder "cluster name")
    end
    kind create cluster --name "$cluster_name" --config "$cluster_name-kind.yaml"
end

function delete-cluster
    set cluster_name $argv[1]
    if test -z "$cluster_name"
        set cluster_name (gum input --placeholder "cluster to delete")
    end
    kind delete cluster --name "$cluster_name"
end

function readme
  set readme_path "$FLOX_ENV_CACHE/README.md"
  test "$argv[1]" = "--refresh" -o ! -f "$readme_path"; and curl -s -o "$readme_path" "https://raw.githubusercontent.com/barstoolbluz/floxenvs/main/kind/README.md" 2>/dev/null
  command -v bat >/dev/null; and bat --paging=always "$readme_path" 2>/dev/null; or cat "$readme_path" 2>/dev/null
end
'''

## Services ----------------------------------------------------------
##  $ flox services start             <- Starts all services
##  $ flox services status            <- Status of running services
##  $ flox activate --start-services  <- Activates & starts all
## -------------------------------------------------------------------
[services]
# myservice.command = "python3 -m http.server"


## Other Environment Options -----------------------------------------
[options]
# Systems that environment is compatible with
systems = [
  "aarch64-darwin",
  "aarch64-linux",
  "x86_64-darwin",
  "x86_64-linux",
]
# Uncomment to disable CUDA detection.
# cuda-detection = false

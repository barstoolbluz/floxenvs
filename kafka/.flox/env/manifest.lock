{
  "lockfile-version": 1,
  "manifest": {
    "version": 1,
    "install": {
      "bash": {
        "pkg-path": "bash"
      },
      "bat": {
        "pkg-path": "bat",
        "pkg-group": "helper-tools"
      },
      "coreutils": {
        "pkg-path": "coreutils",
        "pkg-group": "darwin-tools"
      },
      "curl": {
        "pkg-path": "curl",
        "pkg-group": "helper-tools"
      },
      "gawk": {
        "pkg-path": "gawk",
        "pkg-group": "darwin-tools"
      },
      "gnugrep": {
        "pkg-path": "gnugrep",
        "pkg-group": "gnugrep"
      },
      "gnused": {
        "pkg-path": "gnused",
        "pkg-group": "darwin-tools"
      },
      "gum": {
        "pkg-path": "gum"
      },
      "jdk": {
        "pkg-path": "jdk"
      },
      "jq": {
        "pkg-path": "jq",
        "pkg-group": "helper-tools"
      },
      "kafka": {
        "pkg-path": "apacheKafka"
      },
      "netcat": {
        "pkg-path": "netcat",
        "pkg-group": "env-tools"
      },
      "netstat": {
        "pkg-path": "unixtools.netstat",
        "pkg-group": "env-tools"
      }
    },
    "vars": {
      "KAFKA_CONFIG_DIR": "$FLOX_ENV_CACHE/kafka-config",
      "KAFKA_DATA_DIR": "$FLOX_ENV_CACHE/data/kafka",
      "KAFKA_LOG_DIR": "$FLOX_ENV_CACHE/kafka-logs"
    },
    "hook": {
      "on-activate": "bootstrap_kafka() {\n    clear\n    \n    gum style \\\n        --border rounded \\\n        --border-foreground 240 \\\n        --padding \"1 2\" \\\n        --margin \"1 0\" \\\n        --width 70 \\\n        \"$(gum style --foreground 27 --bold 'Apache Kafka config')\n        \n$(gum style --foreground 240 'First-time setup for your Apache Kafka KRaft environment')\"\n    \n    # detects non-loopback ip address\n    detect_ip() {\n        local ip=\"\"\n        # for macos/darwin\n        if [[ \"$(uname)\" == \"Darwin\" ]]; then\n            ip=$(ifconfig | grep \"inet \" | grep -v 127.0.0.1 | awk '{print $2}' | head -n 1)\n        # for linux and wsl\n        else\n            # try eth0 first (common in wsl2 and linux)\n            ip=$(ip -4 addr show eth0 2>/dev/null | grep inet | awk '{print $2}' | cut -d/ -f1 | head -n 1)\n            \n            # if eth0 didn't work, try other interfaces\n            if [[ -z \"$ip\" ]]; then\n                # try global scope addresses\n                ip=$(ip -4 addr show scope global 2>/dev/null | grep inet | awk '{print $2}' | cut -d/ -f1 | head -n 1)\n                \n                # try any non-loopback as last resort\n                if [[ -z \"$ip\" ]]; then\n                    ip=$(ip -4 addr | grep -v \"127.0.0.1\" | grep -v \"10.255.255\" | grep inet | awk '{print $2}' | cut -d/ -f1 | head -n 1)\n                fi\n            fi\n        fi\n        \n        # default to localhost if no external ip found\n        if [[ -z \"$ip\" ]]; then\n            ip=\"localhost\"\n        fi\n        \n        echo \"$ip\"\n    }\n    \n    # set defaults\n    DEFAULT_KAFKA_MODE=\"kraft-combined\"\n    DEFAULT_KAFKA_NODE_ID=\"1\"\n    DEFAULT_KAFKA_PORT=\"9092\"\n    DEFAULT_KAFKA_HOST=$(detect_ip)\n    DEFAULT_KAFKA_DATA_DIR=\"${FLOX_ENV_CACHE}/data/kafka\"\n    DEFAULT_KAFKA_LOG_DIR=\"${FLOX_ENV_CACHE}/kafka-logs\"\n    DEFAULT_KAFKA_REPLICATION_FACTOR=\"1\"\n    DEFAULT_KAFKA_NUM_PARTITIONS=\"1\"\n    DEFAULT_KRAFT_CONTROLLER_PORT=\"9093\"\n    \n    # create directories\n    mkdir -p \"$KAFKA_CONFIG_DIR\" \"$KAFKA_LOG_DIR\"\n    \n    echo \"\"\n    KAFKA_MODE=$(gum choose --header \"Select Kafka node type:\" \"kraft-combined\" \"kraft-controller\" \"kraft-broker\" \"client\")\n    \n    if [[ \"$KAFKA_MODE\" == \"kraft-\"* ]]; then\n        echo \"$(gum style --foreground 240 'Configure Kafka KRaft Mode')\"\n        echo \"$(gum style --foreground 240 'Press Enter to accept the default values shown in [brackets]')\"\n        echo \"\"\n        \n        # Set JOINING_EXISTING_CLUSTER flag\n        JOINING_EXISTING_CLUSTER=false\n        \n        # set node id based on mode\n        if [ \"$KAFKA_MODE\" = \"kraft-controller\" ]; then\n            # Ask if joining existing cluster or creating new one\n            CLUSTER_ACTION=$(gum choose --header \"Are you:\" \"Creating a new Kafka cluster\" \"Adding a controller to an existing cluster\")\n            \n            # Set flag for joining existing cluster\n            if [ \"$CLUSTER_ACTION\" = \"Adding a controller to an existing cluster\" ]; then\n                JOINING_EXISTING_CLUSTER=true\n            fi\n            \n            if [ \"$JOINING_EXISTING_CLUSTER\" = \"true\" ]; then\n                echo \"$(gum style --foreground 240 'Enter a unique node ID for this controller (must be different from existing controllers)')\"\n                DEFAULT_KAFKA_NODE_ID=\"\"  # No default - user must choose\n            else\n                DEFAULT_KAFKA_NODE_ID=\"1\"\n            fi\n        elif [ \"$KAFKA_MODE\" = \"kraft-broker\" ]; then\n            DEFAULT_KAFKA_NODE_ID=\"2\"\n        fi\n        \n        # When joining existing cluster, prompt for cluster ID first\n        if [ \"$JOINING_EXISTING_CLUSTER\" = \"true\" ]; then\n            echo \"$(gum style --foreground 240 'When joining an existing cluster, you need the exact cluster ID from another controller')\"\n            echo \"$(gum style --foreground 240 'You can find it in $KAFKA_CONFIG_DIR/cluster_id on an existing controller node')\"\n            \n            KAFKA_CLUSTER_ID=$(gum input --prompt \"Enter existing cluster ID: \")\n            \n            # Validate cluster ID is provided\n            if [ -z \"$KAFKA_CLUSTER_ID\" ]; then\n                echo \"❌ No cluster ID provided. This will cause connectivity issues.\"\n                echo \"   Cannot continue without a valid cluster ID for joining an existing cluster.\"\n                return 1\n            fi\n            \n            # Save cluster ID immediately\n            echo \"$KAFKA_CLUSTER_ID\" > \"$KAFKA_CONFIG_DIR/cluster_id\"\n            echo \"✅ Existing cluster ID saved successfully\"\n            \n            # Prompt for at least one existing controller\n            echo \"$(gum style --foreground 240 'Now enter details for at least one existing controller in the cluster')\"\n            \n            EXISTING_CONTROLLER_ID=$(gum input --prompt \"Existing Controller Node ID: \" --placeholder \"1\")\n            EXISTING_CONTROLLER_HOST=$(gum input --prompt \"Existing Controller Host: \" --placeholder \"192.168.0.88\")\n            EXISTING_CONTROLLER_PORT=$(gum input --prompt \"Existing Controller Port: \" --placeholder \"9093\")\n            \n            # Initialize controller quorum with existing controller\n            CONTROLLER_QUORUM=\"${EXISTING_CONTROLLER_ID}@${EXISTING_CONTROLLER_HOST}:${EXISTING_CONTROLLER_PORT}\"\n        fi\n\n        # Only show the controller node message when in controller mode and joining an existing cluster\n        if [ \"$KAFKA_MODE\" = \"kraft-controller\" ] && [ \"$JOINING_EXISTING_CLUSTER\" = \"true\" ]; then\n            echo \"\"\n            echo \"$(gum style --foreground 27 --bold '🔄 Now configuring your new controller node')\"\n            echo \"$(gum style --foreground 240 'Please provide details for the controller you are adding to the cluster')\"\n            echo \"\"\n        fi\n\t\n        # Handle empty DEFAULT_KAFKA_NODE_ID (for joining existing cluster)\n        if [ -z \"$DEFAULT_KAFKA_NODE_ID\" ]; then\n            KAFKA_NODE_ID=$(gum input --prompt \"New Controller's Node ID: \")\n            # Ensure a value is provided\n            if [ -z \"$KAFKA_NODE_ID\" ]; then\n                echo \"❌ A unique node ID is required. Cannot continue.\"\n                return 1\n            fi\n        else\n            KAFKA_NODE_ID=$(gum input --placeholder \"[${DEFAULT_KAFKA_NODE_ID}]\" --value \"$DEFAULT_KAFKA_NODE_ID\" --prompt \"Node ID: \")\n        fi\n        \n        # Use appropriate prompt based on mode for hostname/IP\n        if [ \"$KAFKA_MODE\" = \"kraft-controller\" ]; then\n            HOST_PROMPT=\"Controller's Hostname/IP: \"\n        elif [ \"$KAFKA_MODE\" = \"kraft-broker\" ]; then\n            HOST_PROMPT=\"Broker's Hostname/IP: \"\n        else # kraft-combined\n            HOST_PROMPT=\"Node's Hostname/IP: \"\n        fi\n        KAFKA_HOST=$(gum input --placeholder \"[${DEFAULT_KAFKA_HOST}]\" --value \"$DEFAULT_KAFKA_HOST\" --prompt \"$HOST_PROMPT\")\n        \n        # configure ports based on mode\n        if [ \"$KAFKA_MODE\" = \"kraft-controller\" ]; then\n            KRAFT_CONTROLLER_PORT=$(gum input --placeholder \"[${DEFAULT_KRAFT_CONTROLLER_PORT}]\" --value \"$DEFAULT_KRAFT_CONTROLLER_PORT\" --prompt \"Controller Port: \")\n            KAFKA_PORT=\"\"\n        else\n            if [ \"$KAFKA_MODE\" = \"kraft-broker\" ]; then\n                DEFAULT_KAFKA_PORT=\"9092\"\n            fi\n            KAFKA_PORT=$(gum input --placeholder \"[${DEFAULT_KAFKA_PORT}]\" --value \"$DEFAULT_KAFKA_PORT\" --prompt \"Port: \")\n            KRAFT_CONTROLLER_PORT=\"$DEFAULT_KRAFT_CONTROLLER_PORT\"\n        fi\n        \n        # Set data directory with appropriate prompt\n        if [ \"$KAFKA_MODE\" = \"kraft-controller\" ]; then\n            DIR_PROMPT=\"Controller's Data Directory: \"\n        elif [ \"$KAFKA_MODE\" = \"kraft-broker\" ]; then\n            DIR_PROMPT=\"Broker's Data Directory: \"\n        else # kraft-combined\n            DIR_PROMPT=\"Data Directory: \"\n        fi\n        KAFKA_DATA_DIR=\"${FLOX_ENV_CACHE}/data/kafka/${KAFKA_MODE}-${KAFKA_NODE_ID}\"\n        KAFKA_DATA_DIR=$(gum input --placeholder \"[${KAFKA_DATA_DIR}]\" --value \"$KAFKA_DATA_DIR\" --prompt \"$DIR_PROMPT\")\n        \n        # check for existing data\n        if [ -d \"$KAFKA_DATA_DIR\" ] && [ \"$(ls -A \"$KAFKA_DATA_DIR\" 2>/dev/null)\" ]; then\n            echo \"Found existing Kafka data in $KAFKA_DATA_DIR\"\n            if gum confirm \"Clean existing data directory? (Recommended if changing configs)\" --default=true; then\n                rm -rf \"$KAFKA_DATA_DIR\"/*\n                echo \"Data directory cleaned.\"\n            else\n                echo \"Using existing data directory. Format may fail if cluster IDs don't match.\"\n            fi\n        fi\n        \n        # ensure data directory exists\n        mkdir -p \"$KAFKA_DATA_DIR\"\n        \n        # configure replication for controller mode\n        if [ \"$KAFKA_MODE\" = \"kraft-controller\" ]; then\n            KAFKA_REPLICATION_FACTOR=$(gum input --placeholder \"[${DEFAULT_KAFKA_REPLICATION_FACTOR}]\" --value \"$DEFAULT_KAFKA_REPLICATION_FACTOR\" --prompt \"Default Replication Factor: \")\n            KAFKA_NUM_PARTITIONS=$(gum input --placeholder \"[${DEFAULT_KAFKA_NUM_PARTITIONS}]\" --value \"$DEFAULT_KAFKA_NUM_PARTITIONS\" --prompt \"Default Number of Partitions: \")\n            \n            # set up controller quorum\n            if [ \"$JOINING_EXISTING_CLUSTER\" != \"true\" ]; then\n                CONTROLLER_QUORUM=\"${KAFKA_NODE_ID}@${KAFKA_HOST}:${KRAFT_CONTROLLER_PORT}\"\n                if gum confirm \"Do you want to define additional controllers?\" --default=false; then\n                    echo \"$(gum style --foreground 240 'Configure additional controllers for high availability')\"\n                    \n                    # track used ports to check for conflicts\n                    declare -A used_ports\n                    used_ports[\"$KRAFT_CONTROLLER_PORT\"]=1\n                    \n                    # track highest node id\n                    HIGHEST_NODE_ID=$KAFKA_NODE_ID\n                    \n                    while true; do\n                        # suggest next node id\n                        SUGGESTED_NODE_ID=$((HIGHEST_NODE_ID + 1))\n                        \n                        ADDITIONAL_CONTROLLER_ID=$(gum input --prompt \"Additional Controller Node ID: \" --value \"$SUGGESTED_NODE_ID\")\n                        ADDITIONAL_CONTROLLER_HOST=$(gum input --prompt \"Additional Controller Host: \" --value \"$KAFKA_HOST\" --placeholder \"192.168.0.89\")\n                        \n                        # handle port suggestion\n                        if [ \"$ADDITIONAL_CONTROLLER_HOST\" = \"$KAFKA_HOST\" ]; then\n                            # find next available port\n                            SUGGESTED_PORT=$((KRAFT_CONTROLLER_PORT))\n                            while [ -n \"${used_ports[$SUGGESTED_PORT]}\" ]; do\n                                SUGGESTED_PORT=$((SUGGESTED_PORT + 1))\n                            done\n                        else\n                            SUGGESTED_PORT=\"9093\"\n                        fi\n                        \n                        ADDITIONAL_CONTROLLER_PORT=$(gum input --prompt \"Additional Controller Port: \" --value \"$SUGGESTED_PORT\")\n                        \n                        # handle empty values\n                        if [ -z \"$ADDITIONAL_CONTROLLER_ID\" ]; then\n                            ADDITIONAL_CONTROLLER_ID=\"$SUGGESTED_NODE_ID\"\n                        fi\n                        if [ -z \"$ADDITIONAL_CONTROLLER_PORT\" ]; then\n                            ADDITIONAL_CONTROLLER_PORT=\"$SUGGESTED_PORT\"\n                        fi\n                        \n                        # update highest node id\n                        if [ \"$ADDITIONAL_CONTROLLER_ID\" -gt \"$HIGHEST_NODE_ID\" ]; then\n                            HIGHEST_NODE_ID=\"$ADDITIONAL_CONTROLLER_ID\"\n                        fi\n                        \n                        # check for port conflicts\n                        if [ \"$ADDITIONAL_CONTROLLER_HOST\" = \"$KAFKA_HOST\" ] && [ -n \"${used_ports[$ADDITIONAL_CONTROLLER_PORT]}\" ]; then\n                            echo \"❌ Port conflict: $ADDITIONAL_CONTROLLER_PORT is already in use on this host\"\n                            continue\n                        fi\n                        \n                        # add to quorum\n                        CONTROLLER_QUORUM=\"${CONTROLLER_QUORUM},${ADDITIONAL_CONTROLLER_ID}@${ADDITIONAL_CONTROLLER_HOST}:${ADDITIONAL_CONTROLLER_PORT}\"\n                        \n                        # track used port\n                        if [ \"$ADDITIONAL_CONTROLLER_HOST\" = \"$KAFKA_HOST\" ]; then\n                            used_ports[\"$ADDITIONAL_CONTROLLER_PORT\"]=1\n                        fi\n                        \n                        if ! gum confirm \"Add another controller?\" --default=false; then\n                            break\n                        fi\n                    done\n                    \n                    echo \"Controller quorum configured: $CONTROLLER_QUORUM\"\n                fi\n            else\n                # For joining existing cluster, add this controller to the quorum\n                CONTROLLER_QUORUM=\"${CONTROLLER_QUORUM},${KAFKA_NODE_ID}@${KAFKA_HOST}:${KRAFT_CONTROLLER_PORT}\"\n                echo \"Adding this controller to quorum: $CONTROLLER_QUORUM\"\n            fi\n        else\n            # handle settings for combined and broker modes\n            if [ \"$KAFKA_MODE\" = \"kraft-combined\" ]; then\n                if gum confirm \"Configure advanced KRaft settings?\" --default=false; then\n                    KRAFT_CONTROLLER_PORT=$(gum input --placeholder \"[${DEFAULT_KRAFT_CONTROLLER_PORT}]\" --value \"$DEFAULT_KRAFT_CONTROLLER_PORT\" --prompt \"Controller Port: \")\n                    KAFKA_REPLICATION_FACTOR=$(gum input --placeholder \"[${DEFAULT_KAFKA_REPLICATION_FACTOR}]\" --value \"$DEFAULT_KAFKA_REPLICATION_FACTOR\" --prompt \"Default Replication Factor: \")\n                    KAFKA_NUM_PARTITIONS=$(gum input --placeholder \"[${DEFAULT_KAFKA_NUM_PARTITIONS}]\" --value \"$DEFAULT_KAFKA_NUM_PARTITIONS\" --prompt \"Default Number of Partitions: \")\n                else\n                    KAFKA_REPLICATION_FACTOR=\"$DEFAULT_KAFKA_REPLICATION_FACTOR\"\n                    KAFKA_NUM_PARTITIONS=\"$DEFAULT_KAFKA_NUM_PARTITIONS\"\n                fi\n            else\n                # broker mode defaults\n                KAFKA_REPLICATION_FACTOR=\"$DEFAULT_KAFKA_REPLICATION_FACTOR\"\n                KAFKA_NUM_PARTITIONS=\"$DEFAULT_KAFKA_NUM_PARTITIONS\"\n            fi\n        fi\n        \n        # determine process roles\n        if [ \"$KAFKA_MODE\" = \"kraft-combined\" ]; then\n            PROCESS_ROLES=\"broker,controller\"\n        elif [ \"$KAFKA_MODE\" = \"kraft-controller\" ]; then\n            PROCESS_ROLES=\"controller\"\n        elif [ \"$KAFKA_MODE\" = \"kraft-broker\" ]; then\n            PROCESS_ROLES=\"broker\"\n            \n            # for broker mode, get controller info\n            echo \"$(gum style --foreground 240 'For broker mode, we need the controller information')\"\n            \n            CONTROLLER_HOST=$(gum input --placeholder \"192.168.0.88\" --prompt \"Controller Host IP/Hostname: \")\n            CONTROLLER_PORT=$(gum input --placeholder \"9093\" --prompt \"Controller Port: \")\n            CONTROLLER_NODE_ID=$(gum input --placeholder \"1\" --prompt \"Controller Node ID: \")\n            \n            # create controller quorum\n            CONTROLLER_QUORUM=\"${CONTROLLER_NODE_ID}@${CONTROLLER_HOST}:${CONTROLLER_PORT}\"\n            echo \"Using controller quorum: $CONTROLLER_QUORUM\"\n            \n            # get cluster id from controller\n            echo \"$(gum style --foreground 240 'We need the cluster ID from the controller node')\"\n            echo \"$(gum style --foreground 240 'You can find it in $KAFKA_CONFIG_DIR/cluster_id on the controller')\"\n            \n            KAFKA_CLUSTER_ID=$(gum input --prompt \"Enter cluster ID from controller: \")\n            if [ -z \"$KAFKA_CLUSTER_ID\" ]; then\n                echo \"❌ No cluster ID provided. This will cause connectivity issues.\"\n                echo \"   You can edit $KAFKA_CONFIG_DIR/cluster_id later and run 'flox services restart'\"\n            else\n                echo \"$KAFKA_CLUSTER_ID\" > \"$KAFKA_CONFIG_DIR/cluster_id\"\n                echo \"✅ Cluster ID saved successfully\"\n            fi\n            \n            # check controller connectivity\n            echo \"Checking if controller is reachable...\"\n            if nc -z -w 5 \"$CONTROLLER_HOST\" \"$CONTROLLER_PORT\" 2>/dev/null; then\n                echo \"✅ Controller node is reachable at ${CONTROLLER_HOST}:${CONTROLLER_PORT}\"\n            else\n                echo \"❌ Warning: Cannot reach controller at ${CONTROLLER_HOST}:${CONTROLLER_PORT}\"\n                echo \"   Make sure the controller is running before starting the broker.\"\n            fi\n        fi\n        \n        # generate base kraft properties\n        cat > \"$KAFKA_CONFIG_DIR/kraft.properties.base\" << EOF\n# KRaft config generated by Flox\nnode.id=$KAFKA_NODE_ID\nprocess.roles=$PROCESS_ROLES\nEOF\n\n        # add listeners based on role\n        if [ \"$PROCESS_ROLES\" = \"broker,controller\" ]; then\n            cat >> \"$KAFKA_CONFIG_DIR/kraft.properties.base\" << EOF\nlisteners=PLAINTEXT://$KAFKA_HOST:$KAFKA_PORT,CONTROLLER://$KAFKA_HOST:$KRAFT_CONTROLLER_PORT\nadvertised.listeners=PLAINTEXT://$KAFKA_HOST:$KAFKA_PORT\nEOF\n        elif [ \"$PROCESS_ROLES\" = \"broker\" ]; then\n            cat >> \"$KAFKA_CONFIG_DIR/kraft.properties.base\" << EOF\nlisteners=PLAINTEXT://$KAFKA_HOST:$KAFKA_PORT\nadvertised.listeners=PLAINTEXT://$KAFKA_HOST:$KAFKA_PORT\nEOF\n        else\n            # controller-only\n            cat >> \"$KAFKA_CONFIG_DIR/kraft.properties.base\" << EOF\nlisteners=CONTROLLER://$KAFKA_HOST:$KRAFT_CONTROLLER_PORT\nEOF\n        fi\n        \n        # add security protocols\n        cat >> \"$KAFKA_CONFIG_DIR/kraft.properties.base\" << EOF\nlistener.security.protocol.map=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT\ncontroller.listener.names=CONTROLLER\nEOF\n        \n        # set controller quorum voters\n        if [ \"$KAFKA_MODE\" = \"kraft-broker\" ]; then\n            cat >> \"$KAFKA_CONFIG_DIR/kraft.properties.base\" << EOF\ncontroller.quorum.voters=$CONTROLLER_QUORUM\nEOF\n        elif [ \"$KAFKA_MODE\" = \"kraft-controller\" ] && [ -n \"$CONTROLLER_QUORUM\" ]; then\n            cat >> \"$KAFKA_CONFIG_DIR/kraft.properties.base\" << EOF\ncontroller.quorum.voters=$CONTROLLER_QUORUM\nEOF\n        else\n            cat >> \"$KAFKA_CONFIG_DIR/kraft.properties.base\" << EOF\ncontroller.quorum.voters=${KAFKA_NODE_ID}@$KAFKA_HOST:$KRAFT_CONTROLLER_PORT\nEOF\n        fi\n        \n        # add common config\n        cat >> \"$KAFKA_CONFIG_DIR/kraft.properties.base\" << EOF\nlog.dirs=$KAFKA_DATA_DIR\ndefault.replication.factor=$KAFKA_REPLICATION_FACTOR\nnum.partitions=$KAFKA_NUM_PARTITIONS\nlog.retention.hours=168\nlog.segment.bytes=1073741824\nlog.retention.check.interval.ms=300000\noffsets.topic.replication.factor=1\ntransaction.state.log.replication.factor=1\ntransaction.state.log.min.isr=1\nEOF\n\n        # generate cluster id for controller node\n        if [ \"$KAFKA_MODE\" = \"kraft-controller\" ] || [ \"$KAFKA_MODE\" = \"kraft-combined\" ]; then\n            if [ \"$JOINING_EXISTING_CLUSTER\" != \"true\" ] && [ ! -f \"$KAFKA_CONFIG_DIR/cluster_id\" ]; then\n                # Only generate new ID for new clusters\n                KAFKA_CLUSTER_ID=$(kafka-storage.sh random-uuid)\n                echo \"Generated new cluster ID: $KAFKA_CLUSTER_ID\"\n                echo \"IMPORTANT: Save this cluster ID for use on the broker node!\"\n                echo \"$KAFKA_CLUSTER_ID\" > \"$KAFKA_CONFIG_DIR/cluster_id\"\n            elif [ -f \"$KAFKA_CONFIG_DIR/cluster_id\" ]; then\n                KAFKA_CLUSTER_ID=$(cat \"$KAFKA_CONFIG_DIR/cluster_id\")\n                echo \"Using existing cluster ID: $KAFKA_CLUSTER_ID\"\n            fi\n        fi\n        \n        # save config\n        cat > \"$FLOX_ENV_CACHE/kafka_config.sh\" << EOF\n# Kafka config generated by Flox environment\nKAFKA_MODE=\"$KAFKA_MODE\"\nKAFKA_CONFIG_DIR=\"$KAFKA_CONFIG_DIR\"\nKAFKA_LOG_DIR=\"$KAFKA_LOG_DIR\"\nKAFKA_DATA_DIR=\"$KAFKA_DATA_DIR\"\nKAFKA_NODE_ID=\"$KAFKA_NODE_ID\"\nKAFKA_HOST=\"$KAFKA_HOST\"\nKAFKA_PORT=\"$KAFKA_PORT\"\nKRAFT_CONTROLLER_PORT=\"$KRAFT_CONTROLLER_PORT\"\nPROCESS_ROLES=\"$PROCESS_ROLES\"\nEOF\n\n        # add mode-specific config\n        if [ \"$KAFKA_MODE\" = \"kraft-controller\" ] && [ -n \"$CONTROLLER_QUORUM\" ]; then\n            cat >> \"$FLOX_ENV_CACHE/kafka_config.sh\" << EOF\nCONTROLLER_QUORUM=\"$CONTROLLER_QUORUM\"\nEOF\n        fi\n\n        # add broker-specific config\n        if [ \"$KAFKA_MODE\" = \"kraft-broker\" ]; then\n            cat >> \"$FLOX_ENV_CACHE/kafka_config.sh\" << EOF\nCONTROLLER_QUORUM=\"$CONTROLLER_QUORUM\"\nCONTROLLER_HOST=\"$CONTROLLER_HOST\"\nCONTROLLER_PORT=\"$CONTROLLER_PORT\"\nCONTROLLER_NODE_ID=\"$CONTROLLER_NODE_ID\"\nEOF\n        fi\n        \n        # add cluster id if available\n        if [ -f \"$KAFKA_CONFIG_DIR/cluster_id\" ]; then\n            cat >> \"$FLOX_ENV_CACHE/kafka_config.sh\" << EOF\nKAFKA_CLUSTER_ID=\"$(cat \"$KAFKA_CONFIG_DIR/cluster_id\")\"\nEOF\n        fi\n    \n    elif [ \"$KAFKA_MODE\" = \"client\" ]; then\n        echo \"$(gum style --foreground 240 'Configure Kafka Client')\"\n        echo \"$(gum style --foreground 240 'Press Enter to accept the default values shown in [brackets]')\"\n        echo \"\"\n\n        # set initial bootstrap server\n        BOOTSTRAP_SERVERS=\"${DEFAULT_KAFKA_HOST}:${DEFAULT_KAFKA_PORT}\"\n        BOOTSTRAP_SERVERS=$(gum input --placeholder \"[${BOOTSTRAP_SERVERS}]\" --value \"${BOOTSTRAP_SERVERS}\" --prompt \"Initial Bootstrap Server: \")\n\n        # add additional servers\n        while gum confirm \"Add additional bootstrap server?\" --default=false; do\n            ADDITIONAL_SERVER=$(gum input --placeholder \"hostname:port\" --prompt \"Additional Bootstrap Server: \")\n\n            # validate format\n            if [[ \"$ADDITIONAL_SERVER\" =~ ^[^:]+:[0-9]+$ ]]; then\n                BOOTSTRAP_SERVERS=\"${BOOTSTRAP_SERVERS},${ADDITIONAL_SERVER}\"\n                echo \"Added: $ADDITIONAL_SERVER\"\n            else\n                echo \"❌ Invalid format. Please use hostname:port\"\n            fi\n        done\n\n        # display final config\n        echo \"Final bootstrap servers: $BOOTSTRAP_SERVERS\"\n\n        # select client type\n        CLIENT_TYPE=$(gum choose --header \"Select client type:\" \"producer\" \"consumer\" \"both\")\n\n        # configure topics\n        DEFAULT_TOPIC=\"flox-is-great\"\n        KAFKA_TOPICS=$(gum input --placeholder \"[${DEFAULT_TOPIC}]\" --value \"${DEFAULT_TOPIC}\" --prompt \"Topic(s) to produce to/consume from: \")\n\n        # select processing mode\n        KAFKA_MESSAGE_PROCESSING_MODE=$(gum choose --header \"Select message processing mode:\" \"echo\" \"file\" \"script\")\n\n        # configure scripts if needed\n        if [ \"$KAFKA_MESSAGE_PROCESSING_MODE\" = \"script\" ]; then\n            mkdir -p \"$FLOX_ENV_CACHE/kafka-scripts\"\n            \n            if [ \"$CLIENT_TYPE\" = \"producer\" ] || [ \"$CLIENT_TYPE\" = \"both\" ]; then\n                SCRIPT_NAME=$(gum input --placeholder \"generate_messages.sh\" --value \"generate_messages.sh\" --prompt \"Producer script name: \")\n                \n                if [ ! -f \"$FLOX_ENV_CACHE/kafka-scripts/$SCRIPT_NAME\" ]; then\n                    cat > \"$FLOX_ENV_CACHE/kafka-scripts/$SCRIPT_NAME\" << 'EOF'\n#!/bin/bash\n# Example message generation script\nwhile true; do\n    echo \"Message at $(date)\"\n    sleep 1\ndone\nEOF\n                    chmod +x \"$FLOX_ENV_CACHE/kafka-scripts/$SCRIPT_NAME\"\n                    echo \"Created example script: $FLOX_ENV_CACHE/kafka-scripts/$SCRIPT_NAME\"\n                fi\n            fi\n            \n            if [ \"$CLIENT_TYPE\" = \"consumer\" ] || [ \"$CLIENT_TYPE\" = \"both\" ]; then\n                SCRIPT_NAME=$(gum input --placeholder \"process_messages.sh\" --value \"process_messages.sh\" --prompt \"Consumer script name: \")\n                \n                if [ ! -f \"$FLOX_ENV_CACHE/kafka-scripts/$SCRIPT_NAME\" ]; then\n                    cat > \"$FLOX_ENV_CACHE/kafka-scripts/$SCRIPT_NAME\" << 'EOF'\n#!/bin/bash\n# Example message processing script\nwhile read -r message; do\n    echo \"Processed: $message\"\ndone\nEOF\n                    chmod +x \"$FLOX_ENV_CACHE/kafka-scripts/$SCRIPT_NAME\"\n                    echo \"Created example script: $FLOX_ENV_CACHE/kafka-scripts/$SCRIPT_NAME\"\n                fi\n            fi\n        fi\n\n        # configure advanced settings\n        if gum confirm \"Configure advanced client settings?\" --default=false; then\n            KAFKA_CLIENT_COUNT=$(gum input --placeholder \"[1]\" --value \"1\" --prompt \"Number of client instances: \")\n            KAFKA_CLIENT_PARALLEL_CHOICE=$(gum choose --header \"Run clients in parallel?\" \"true\" \"false\")\n            \n            if [ \"$KAFKA_MESSAGE_PROCESSING_MODE\" = \"file\" ]; then\n                KAFKA_FILE_APPEND_CHOICE=$(gum choose --header \"Append to output file?\" \"true\" \"false\")\n            else\n                KAFKA_FILE_APPEND_CHOICE=\"true\"\n            fi\n            \n            # set directories\n            DEFAULT_OUTPUT_DIR=\"$FLOX_ENV_CACHE/kafka-message-output\"\n            KAFKA_MESSAGE_OUTPUT_DIR=$(gum input --placeholder \"[${DEFAULT_OUTPUT_DIR}]\" --value \"${DEFAULT_OUTPUT_DIR}\" --prompt \"Message output directory: \")\n            \n            DEFAULT_SCRIPTS_DIR=\"$FLOX_ENV_CACHE/kafka-scripts\"\n            KAFKA_SCRIPTS_DIR=$(gum input --placeholder \"[${DEFAULT_SCRIPTS_DIR}]\" --value \"${DEFAULT_SCRIPTS_DIR}\" --prompt \"Scripts directory: \")\n        else\n            # set defaults\n            KAFKA_CLIENT_COUNT=\"1\"\n            KAFKA_CLIENT_PARALLEL_CHOICE=\"false\"\n            KAFKA_FILE_APPEND_CHOICE=\"true\"\n            KAFKA_MESSAGE_OUTPUT_DIR=\"$FLOX_ENV_CACHE/kafka-message-output\"\n            KAFKA_SCRIPTS_DIR=\"$FLOX_ENV_CACHE/kafka-scripts\"\n        fi\n\n        # create directories\n        mkdir -p \"$KAFKA_MESSAGE_OUTPUT_DIR\" \"$KAFKA_SCRIPTS_DIR\"\n        \n        # save client config\n        cat > \"$FLOX_ENV_CACHE/kafka_config.sh\" << EOF\n# Kafka config generated by Flox environment\nKAFKA_MODE=\"$KAFKA_MODE\"\nKAFKA_CONFIG_DIR=\"$KAFKA_CONFIG_DIR\"\nKAFKA_LOG_DIR=\"$KAFKA_LOG_DIR\"\nKAFKA_DATA_DIR=\"$KAFKA_DATA_DIR\"\nBOOTSTRAP_SERVERS=\"$BOOTSTRAP_SERVERS\"\nCLIENT_TYPE=\"$CLIENT_TYPE\"\nKAFKA_TOPICS=\"$KAFKA_TOPICS\"\nKAFKA_CLIENT_COUNT=\"$KAFKA_CLIENT_COUNT\"\nKAFKA_CLIENT_PARALLEL=\"$KAFKA_CLIENT_PARALLEL_CHOICE\"\nKAFKA_MESSAGE_PROCESSING_MODE=\"$KAFKA_MESSAGE_PROCESSING_MODE\"\nKAFKA_MESSAGE_OUTPUT_DIR=\"$KAFKA_MESSAGE_OUTPUT_DIR\"\nKAFKA_SCRIPTS_DIR=\"$KAFKA_SCRIPTS_DIR\"\nKAFKA_FILE_APPEND=\"$KAFKA_FILE_APPEND_CHOICE\"\nEOF\n    fi\n\n    # apply config and export variables\n    source \"$FLOX_ENV_CACHE/kafka_config.sh\"\n    \n    # export critical variables\n    export KAFKA_MODE\n    export KAFKA_CONFIG_DIR\n    export KAFKA_LOG_DIR\n    export KAFKA_DATA_DIR\n    \n    if [ \"$KAFKA_MODE\" = \"client\" ]; then\n        export BOOTSTRAP_SERVERS\n        export CLIENT_TYPE\n        export KAFKA_TOPICS\n        export KAFKA_CLIENT_COUNT\n        export KAFKA_CLIENT_PARALLEL\n        export KAFKA_MESSAGE_PROCESSING_MODE\n        export KAFKA_MESSAGE_OUTPUT_DIR\n        export KAFKA_SCRIPTS_DIR\n        export KAFKA_FILE_APPEND\n    else\n        export KAFKA_NODE_ID\n        export KAFKA_HOST\n        export KAFKA_PORT\n        export KRAFT_CONTROLLER_PORT\n        export PROCESS_ROLES\n        [ -n \"$KAFKA_CLUSTER_ID\" ] && export KAFKA_CLUSTER_ID\n    fi\n    \n    export KAFKA_HOME=\"$(dirname $(which kafka-server-start.sh))/..\"\n    \n    # display exported variables\n    echo \"\"\n    echo \"$(gum style --foreground 240 'Exported env vars:')\"\n    echo \"  KAFKA_MODE=$KAFKA_MODE\"\n    echo \"  KAFKA_CONFIG_DIR=$KAFKA_CONFIG_DIR\"\n    echo \"  KAFKA_LOG_DIR=$KAFKA_LOG_DIR\"\n    echo \"  KAFKA_DATA_DIR=$KAFKA_DATA_DIR\"\n    \n    if [ \"$KAFKA_MODE\" = \"client\" ]; then\n        echo \"  BOOTSTRAP_SERVERS=$BOOTSTRAP_SERVERS\"\n        echo \"  CLIENT_TYPE=$CLIENT_TYPE\"\n        echo \"  KAFKA_TOPICS=$KAFKA_TOPICS\"\n        echo \"  KAFKA_CLIENT_COUNT=$KAFKA_CLIENT_COUNT\"\n        echo \"  KAFKA_CLIENT_PARALLEL=$KAFKA_CLIENT_PARALLEL\"\n        echo \"  KAFKA_MESSAGE_PROCESSING_MODE=$KAFKA_MESSAGE_PROCESSING_MODE\"\n        echo \"  KAFKA_MESSAGE_OUTPUT_DIR=$KAFKA_MESSAGE_OUTPUT_DIR\"\n        echo \"  KAFKA_SCRIPTS_DIR=$KAFKA_SCRIPTS_DIR\"\n        echo \"  KAFKA_FILE_APPEND=$KAFKA_FILE_APPEND\"\n    else\n        echo \"  KAFKA_NODE_ID=$KAFKA_NODE_ID\"\n        echo \"  KAFKA_HOST=$KAFKA_HOST\"\n        echo \"  KAFKA_PORT=$KAFKA_PORT\"\n        echo \"  KRAFT_CONTROLLER_PORT=$KRAFT_CONTROLLER_PORT\"\n        echo \"  PROCESS_ROLES=$PROCESS_ROLES\"\n        [ -n \"$KAFKA_CLUSTER_ID\" ] && echo \"  KAFKA_CLUSTER_ID=$KAFKA_CLUSTER_ID\"\n    fi\n    \n    echo \"  KAFKA_HOME=$KAFKA_HOME\"\n    \n    echo \"\"\n    echo \"$(gum style --foreground 34 --bold \"✓ Kafka config saved!\")\"\n}\n\n# Setup environment variables from config file\nsetup_kafka_env() {\n    if [ -f \"$FLOX_ENV_CACHE/kafka_config.sh\" ]; then\n        # Source the config file\n        source \"$FLOX_ENV_CACHE/kafka_config.sh\"\n        \n        # Explicitly export all variables\n        export KAFKA_MODE\n        export KAFKA_CONFIG_DIR\n        export KAFKA_LOG_DIR\n        export KAFKA_DATA_DIR\n        export KAFKA_NODE_ID\n        export KAFKA_HOST\n        export KAFKA_PORT\n        export KRAFT_CONTROLLER_PORT\n        export PROCESS_ROLES\n        [ -n \"$KAFKA_CLUSTER_ID\" ] && export KAFKA_CLUSTER_ID\n        export KAFKA_HOME=\"$(dirname $(which kafka-server-start.sh))/..\"\n        \n        # Try to find JAVA_HOME if not already set\n        if [ -z \"$JAVA_HOME\" ]; then\n            export JAVA_HOME=\"$(dirname $(dirname $(which java)))\"\n        fi\n        \n        # Debug: Show loaded variables\n#        echo \"Loaded Kafka environment variables:\" >&2\n#        echo \"  KAFKA_MODE=$KAFKA_MODE\" >&2\n#        echo \"  KAFKA_CONFIG_DIR=$KAFKA_CONFIG_DIR\" >&2\n#        echo \"  KAFKA_LOG_DIR=$KAFKA_LOG_DIR\" >&2\n#        echo \"  KAFKA_DATA_DIR=$KAFKA_DATA_DIR\" >&2\n#        echo \"  KAFKA_NODE_ID=$KAFKA_NODE_ID\" >&2\n#        echo \"  KAFKA_HOST=$KAFKA_HOST\" >&2\n#        echo \"  KAFKA_PORT=$KAFKA_PORT\" >&2\n#        echo \"  KRAFT_CONTROLLER_PORT=$KRAFT_CONTROLLER_PORT\" >&2\n#        echo \"  PROCESS_ROLES=$PROCESS_ROLES\" >&2\n#        [ -n \"$KAFKA_CLUSTER_ID\" ] && echo \"  KAFKA_CLUSTER_ID=$KAFKA_CLUSTER_ID\" >&2\n#        echo \"  KAFKA_HOME=$KAFKA_HOME\" >&2\n#    else\n#        echo \"WARNING: kafka_config.sh not found at $FLOX_ENV_CACHE/kafka_config.sh\" >&2\n    fi\n}\n\n# Modified show_kafka_help function with fixed formatting\ninfo() {\n    # Build the header content with consistent spacing\n    local header_content=$(cat << EOF\n$(gum style --foreground 141 --bold 'This is a  F l o x  Apache Kafka Environment (KRaft Mode)')\n\n👉  Manage Kafka Cluster(s):\n    $(gum style --foreground 212 'bootstrap')                              Runs interactive Kafka bootstrapping wizard\n    $(gum style --foreground 212 'topos')                                  Shows information about Kafka cluster topology\n\n👉  Use Kafka:\n    $(gum style --foreground 212 'kreate <topic> [partitions] [rf]')       Creates a new Kafka topic\n    $(gum style --foreground 212 'list')                                   Lists all available Kafka topics\n    $(gum style --foreground 212 'describe <topic>')                       Shows details for a specific topic\n    $(gum style --foreground 212 'status')                                 Checks Kafka broker status\nEOF\n)\n\n    # Add service start command based on mode\n    if [ \"$KAFKA_MODE\" = \"client\" ]; then\n        header_content+=$(cat << EOF\n\n    $(gum style --foreground 212 'flox services start')                    Start ${CLIENT_TYPE} client(s)\nEOF\n)\n    fi\n\n    header_content+=$(cat << EOF\n\n\n👉  Start / Stop / Monitor Kafka Service(s):\n    $(gum style --foreground 212 'flox services <start|stop|restart>')     Starts/stops/restarts Kafka services\n    $(gum style --foreground 212 'flox services status')                   Shows Kafka services status\n    $(gum style --foreground 212 'flox services logs kafka')               Shows Kafka logs\n                                           (\\`--follow\\` updates log events in console)\n\n👉  Get Help:\n    $(gum style --foreground 212 'readme')                                 View README.md using \\`bat\\`\n    $(gum style --foreground 212 'info')                                   Shows this help message\n\n\n👉  F l o x  Kafka Environment Details:\n      Kafka Mode:         $(gum style --foreground 212 \"${KAFKA_MODE:-Not configured}\")\nEOF\n)\n\n    # Add node-specific information based on the mode\n    if [ \"$KAFKA_MODE\" = \"kraft-controller\" ]; then\n        header_content+=$(cat << EOF\n\n      Controller Port:    $(gum style --foreground 212 \"${KRAFT_CONTROLLER_PORT}\")\n      Quorum Voters:      $(gum style --foreground 212 \"${CONTROLLER_QUORUM}\")\nEOF\n)\n        if [ -f \"$KAFKA_CONFIG_DIR/cluster_id\" ]; then\n            header_content+=$(cat << EOF\n\n      Cluster ID:         $(gum style --foreground 212 \"$(cat \"$KAFKA_CONFIG_DIR/cluster_id\")\")\n      ⚠️  IMPORTANT: Use this cluster ID when setting up broker nodes\nEOF\n)\n        fi\n    elif [ \"$KAFKA_MODE\" = \"kraft-broker\" ]; then\n        header_content+=$(cat << EOF\n\n      Controller Quorum:  $(gum style --foreground 212 \"${CONTROLLER_QUORUM}\")\n      Listening on:       $(gum style --foreground 212 \"${KAFKA_HOST}:${KAFKA_PORT}\")\nEOF\n)\n    elif [ \"$KAFKA_MODE\" = \"kraft-combined\" ]; then\n        header_content+=$(cat << EOF\n\n      Broker Port:        $(gum style --foreground 212 \"${KAFKA_PORT}\")\n      Controller Port:    $(gum style --foreground 212 \"${KRAFT_CONTROLLER_PORT}\")\nEOF\n)\n        if [ \"$ADVANCED_MODE\" = \"true\" ] && [ -n \"$CONTROLLER_QUORUM\" ]; then\n            header_content+=$(cat << EOF\n\n      Quorum Voters:      $(gum style --foreground 212 \"${CONTROLLER_QUORUM}\")\nEOF\n)\n        fi\n        if [ -f \"$KAFKA_CONFIG_DIR/cluster_id\" ]; then\n            header_content+=$(cat << EOF\n\n      Cluster ID:         $(gum style --foreground 212 \"$(cat \"$KAFKA_CONFIG_DIR/cluster_id\")\")\nEOF\n)\n        fi\n    elif [ \"$KAFKA_MODE\" = \"client\" ]; then\n        header_content+=$(cat << EOF\n\n      Connected to:       $(gum style --foreground 212 \"${BOOTSTRAP_SERVERS}\")\n      Client Type:        $(gum style --foreground 212 \"${CLIENT_TYPE}\")\n      Topics:             $(gum style --foreground 212 \"${KAFKA_TOPICS}\")\n      Processing Mode:    $(gum style --foreground 212 \"${KAFKA_MESSAGE_PROCESSING_MODE}\")\nEOF\n)\n        # Add mode-specific information\n        if [ \"$KAFKA_MESSAGE_PROCESSING_MODE\" = \"script\" ]; then\n            header_content+=$(cat << EOF\n\n      Scripts Dir:        $(gum style --foreground 212 \"${KAFKA_SCRIPTS_DIR}\")\nEOF\n)\n        elif [ \"$KAFKA_MESSAGE_PROCESSING_MODE\" = \"file\" ]; then\n            header_content+=$(cat << EOF\n\n      Output Dir:         $(gum style --foreground 212 \"${KAFKA_MESSAGE_OUTPUT_DIR}\")\n      Append Mode:        $(gum style --foreground 212 \"${KAFKA_FILE_APPEND}\")\nEOF\n)\n        fi\n        \n        # Add advanced settings info if configured\n        if [ \"$KAFKA_CLIENT_COUNT\" != \"1\" ] || [ \"$KAFKA_CLIENT_PARALLEL\" = \"true\" ]; then\n            header_content+=$(cat << EOF\n\n      Client Instances:   $(gum style --foreground 212 \"${KAFKA_CLIENT_COUNT}\")\n      Parallel Execution: $(gum style --foreground 212 \"${KAFKA_CLIENT_PARALLEL}\")\nEOF\n)\n        fi\n    fi\n    \n    # Create the help message with Gum styling\n    gum style \\\n        --border rounded \\\n        --border-foreground 240 \\\n        --padding \"1 2\" \\\n        --margin \"1 0\" \\\n        --width 96 \\\n        \"$header_content\"\n}\n\n# Make bootstrap function available\nbootstrap() {\n    bootstrap_kafka\n}\n\n# Check if Kafka config exists, if not, prompt to run bootstrap\nif [ ! -f \"$FLOX_ENV_CACHE/kafka_config.sh\" ]; then\n    gum style --foreground 212 --bold \"No Kafka configuration detected. Let's set one up!\"\n    bootstrap_kafka\nelse\n    # Source the config and set up environment\n    setup_kafka_env\nfi\n\n# checks does/does not readme exist, downloads if not exist\ndownload_readme() {\n  local readme_path=\"$FLOX_ENV_PROJECT/README.md\"\n  \n  if [ ! -f \"$readme_path\" ] || [ ! -s \"$readme_path\" ]; then\n    curl -sL \"https://raw.githubusercontent.com/barstoolbluz/floxenvs/main/kafka/README.md\" > \"$readme_path\" 2>/dev/null\n  fi\n}\n\n# Show help message after configuration\ninfo\ndownload_readme\n"
    },
    "profile": {
      "bash": "# sources helper functions\nsource \"$FLOX_ENV_CACHE/helper-functions/helper-functions.sh\"\n\nreadme() {\n  if [[ \"$1\" == \"--refresh\" ]] || [ ! -s \"$FLOX_ENV_PROJECT/README.md\" ]; then\n    curl -sL \"https://raw.githubusercontent.com/barstoolbluz/floxenvs/main/kafka/README.md\" > \"$FLOX_ENV_PROJECT/README.md\" 2>/dev/null\n  fi\n  bat --language markdown \"$FLOX_ENV_PROJECT/README.md\" 2>/dev/null\n}\n",
      "zsh": "# wraps helper-functions.sh to run using bash -c\n_kh() { bash -c \"source \\\"$FLOX_ENV_CACHE/helper-functions/helper-functions.sh\\\" && main $1 ${@:2}\"; }\n\nkreate() { _kh kreate \"$@\"; }\nlist() { _kh list \"$@\"; }\ndescribe() { _kh describe \"$@\"; }\nproduce() { _kh produce \"$@\"; }\nkonsume() { _kh konsume \"$@\"; }\nstatus() { _kh status \"$@\"; }\ntopos() { _kh topos \"$@\"; }\ninfo() { _kh info \"$@\"; }\ntopos() { _kh topology \"$@\"; }\n\nreadme() {\n  if [[ \"$1\" == \"--refresh\" ]] || [ ! -s \"$FLOX_ENV_PROJECT/README.md\" ]; then\n    curl -sL \"https://raw.githubusercontent.com/barstoolbluz/floxenvs/main/kafka/README.md\" > \"$FLOX_ENV_PROJECT/README.md\" 2>/dev/null\n  fi\n  bat --language markdown \"$FLOX_ENV_PROJECT/README.md\" 2>/dev/null\n}\n",
      "fish": "# wraps helper-function.sh to run using bash -c\nfunction _kh\n  set cmd $argv[1]\n  set -e argv[1]\n  bash -c \"source \\\"$FLOX_ENV_CACHE/helper-functions.sh\\\" && main $cmd $argv\"\nend\n\nfunction kreate; _kh kreate $argv; end\nfunction list; _kh list $argv; end\nfunction describe; _kh describe $argv; end\nfunction produce; _kh produce $argv; end\nfunction konsume; _kh konsume $argv; end\nfunction status; _kh status $argv; end\nfunction topos; _kh topos $argv; end\nfunction info; _kh info $argv; end\nfunction topos; _kh topology $argv; end\n\nfunction readme\n  if test \"$argv[1]\" = \"--refresh\"; or test ! -s \"$FLOX_ENV_PROJECT/README.md\"\n    curl -sL \"https://raw.githubusercontent.com/barstoolbluz/floxenvs/main/kafka/README.md\" > \"$FLOX_ENV_PROJECT/README.md\" 2>/dev/null\n  fi\n  bat --language markdown \"$FLOX_ENV_PROJECT/README.md\" 2>/dev/null\nend\n"
    },
    "options": {
      "systems": [
        "aarch64-linux",
        "x86_64-linux",
        "aarch64-darwin",
        "x86_64-darwin"
      ]
    },
    "services": {
      "kafka": {
        "command": "# creates required directories\nmkdir -p \"$FLOX_ENV_CACHE/kafka-logs\"\nmkdir -p \"$FLOX_ENV_CACHE/kafka-config\"\nmkdir -p \"$FLOX_ENV_CACHE/data/kafka\"\nmkdir -p \"$FLOX_ENV_CACHE/kafka-message-output\"\nmkdir -p \"$FLOX_ENV_CACHE/kafka-scripts\"\n\n# verifies config file exists\nif [ ! -f \"$FLOX_ENV_CACHE/kafka_config.sh\" ]; then\n    echo \"ERROR: kafka_config.sh not found. Please run 'bootstrap' first.\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    exit 1\nfi\n\n# loads config - uses set -a to auto-export all variables\necho \"Loading config from: $FLOX_ENV_CACHE/kafka_config.sh\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\nif [ -f \"$FLOX_ENV_CACHE/kafka_config.sh\" ]; then\n    set -a\n    . \"$FLOX_ENV_CACHE/kafka_config.sh\"\n    set +a\n    echo \"config loaded successfully\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\nelse\n    echo \"ERROR: config file not found\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    exit 1\nfi\n\n# logs debug info to verify variables\necho \"DEBUG: After sourcing kafka_config.sh\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\necho \"KAFKA_MODE=${KAFKA_MODE}\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\necho \"BOOTSTRAP_SERVERS=${BOOTSTRAP_SERVERS}\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\necho \"CLIENT_TYPE=${CLIENT_TYPE}\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\necho \"KAFKA_CONFIG_DIR=${KAFKA_CONFIG_DIR}\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\necho \"KAFKA_TOPICS=${KAFKA_TOPICS}\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n\n# performs mode-specific validation\nif [ \"$KAFKA_MODE\" = \"client\" ]; then\n    # validates client mode variables\n    if [ -z \"$KAFKA_MODE\" ] || [ -z \"$BOOTSTRAP_SERVERS\" ]; then\n        echo \"ERROR: Critical variables not set for client mode. Please run 'bootstrap' first.\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n        echo \"KAFKA_MODE='$KAFKA_MODE', BOOTSTRAP_SERVERS='$BOOTSTRAP_SERVERS'\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n        exit 1\n    fi\nelse\n    # validates broker/controller mode variables\n    if [ -z \"$KAFKA_MODE\" ] || [ -z \"$KAFKA_NODE_ID\" ] || [ -z \"$KAFKA_HOST\" ]; then\n        echo \"ERROR: Critical variables not set. Please run 'bootstrap' first.\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n        echo \"KAFKA_MODE='$KAFKA_MODE', KAFKA_NODE_ID='$KAFKA_NODE_ID', KAFKA_HOST='$KAFKA_HOST'\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n        exit 1\n    fi\nfi\n\n# sets default for JMX cleanup\nexport KAFKA_CLEANUP_JMX=\"${KAFKA_CLEANUP_JMX:-true}\"\n\n# logs config\necho \"=== Kafka Service Startup ===\" > \"$FLOX_ENV_CACHE/kafka-logs/service.log\"\necho \"Starting at $(date)\" >> \"$FLOX_ENV_CACHE/kafka-logs/service.log\"\necho \"KAFKA_MODE = $KAFKA_MODE\" >> \"$FLOX_ENV_CACHE/kafka-logs/service.log\"\n\n# handles client mode operation\nif [ \"$KAFKA_MODE\" = \"client\" ]; then\n    echo \"Starting in client mode with $CLIENT_TYPE\" >> \"$FLOX_ENV_CACHE/kafka-logs/service.log\"\n    echo \"Bootstrap servers: $BOOTSTRAP_SERVERS\" >> \"$FLOX_ENV_CACHE/kafka-logs/service.log\"\n    echo \"Client count: ${KAFKA_CLIENT_COUNT:-1}\" >> \"$FLOX_ENV_CACHE/kafka-logs/service.log\"\n    echo \"Running in parallel: ${KAFKA_CLIENT_PARALLEL:-true}\" >> \"$FLOX_ENV_CACHE/kafka-logs/service.log\"\n    \n    # sets defaults for client mode\n    KAFKA_CLIENT_COUNT=${KAFKA_CLIENT_COUNT:-1}\n    KAFKA_CLIENT_PARALLEL=${KAFKA_CLIENT_PARALLEL:-true}\n    KAFKA_FILE_APPEND=${KAFKA_FILE_APPEND:-true}\n    KAFKA_MESSAGE_PROCESSING_MODE=${KAFKA_MESSAGE_PROCESSING_MODE:-echo}\n    KAFKA_MESSAGE_OUTPUT_DIR=${KAFKA_MESSAGE_OUTPUT_DIR:-$FLOX_ENV_CACHE/kafka-message-output}\n    KAFKA_SCRIPTS_DIR=${KAFKA_SCRIPTS_DIR:-$FLOX_ENV_CACHE/kafka-scripts}\n    \n    # stores background process IDs\n    declare -a client_pids\n    \n    # runs a client instance\n    run_client_instance() {\n        local client_id=$1\n        local log_file=\"$FLOX_ENV_CACHE/kafka-logs/client_${client_id}.log\"\n        \n        echo \"Starting client instance $client_id (type: $CLIENT_TYPE, mode: $KAFKA_MESSAGE_PROCESSING_MODE)\" | tee -a \"$log_file\"\n        \n        # creates temporary properties file\n        local client_props_file=\"$FLOX_ENV_CACHE/kafka-config/client_${client_id}.properties\"\n        \n        # exports env vars and runs client\n        case \"$CLIENT_TYPE\" in\n            \"consumer\")\n                # generates consumer client.properties\n                cat > \"$client_props_file\" <<-ENDOFCONSUMER\nbootstrap.servers=$BOOTSTRAP_SERVERS\ngroup.id=flox-consumer-group-$client_id\nauto.offset.reset=earliest\nenable.auto.commit=true\nauto.commit.interval.ms=1000\nkey.deserializer=org.apache.kafka.common.serialization.StringDeserializer\nvalue.deserializer=org.apache.kafka.common.serialization.StringDeserializer\nENDOFCONSUMER\n\n                # exports env vars\n                export BOOTSTRAP_SERVERS\n                export KAFKA_TOPICS\n\n                case \"$KAFKA_MESSAGE_PROCESSING_MODE\" in\n                    \"echo\")\n                        env BOOTSTRAP_SERVERS=\"$BOOTSTRAP_SERVERS\" KAFKA_TOPICS=\"$KAFKA_TOPICS\" \\\n                            kafka-console-consumer.sh --bootstrap-server \"$BOOTSTRAP_SERVERS\" \\\n                            --topic \"$KAFKA_TOPICS\" \\\n                            --consumer.config \"$client_props_file\" \\\n                            2>&1 | tee -a \"$log_file\"\n                        ;;\n                    \"file\")\n                        output_file=\"$KAFKA_MESSAGE_OUTPUT_DIR/client_${client_id}_messages.txt\"\n                        if [ \"$KAFKA_FILE_APPEND\" = \"true\" ]; then\n                            env BOOTSTRAP_SERVERS=\"$BOOTSTRAP_SERVERS\" KAFKA_TOPICS=\"$KAFKA_TOPICS\" \\\n                                kafka-console-consumer.sh --bootstrap-server \"$BOOTSTRAP_SERVERS\" \\\n                                --topic \"$KAFKA_TOPICS\" \\\n                                --consumer.config \"$client_props_file\" \\\n                                2>> \"$log_file\" >> \"$output_file\"\n                        else\n                            env BOOTSTRAP_SERVERS=\"$BOOTSTRAP_SERVERS\" KAFKA_TOPICS=\"$KAFKA_TOPICS\" \\\n                                kafka-console-consumer.sh --bootstrap-server \"$BOOTSTRAP_SERVERS\" \\\n                                --topic \"$KAFKA_TOPICS\" \\\n                                --consumer.config \"$client_props_file\" \\\n                                2>> \"$log_file\" > \"$output_file\"\n                        fi\n                        ;;\n                    \"script\")\n                        script_file=\"$KAFKA_SCRIPTS_DIR/process_messages.sh\"\n                        if [ -x \"$script_file\" ]; then\n                            env BOOTSTRAP_SERVERS=\"$BOOTSTRAP_SERVERS\" KAFKA_TOPICS=\"$KAFKA_TOPICS\" \\\n                                kafka-console-consumer.sh --bootstrap-server \"$BOOTSTRAP_SERVERS\" \\\n                                --topic \"$KAFKA_TOPICS\" \\\n                                --consumer.config \"$client_props_file\" \\\n                                2>> \"$log_file\" | \"$script_file\" 2>&1 | tee -a \"$log_file\"\n                        else\n                            echo \"ERROR: Processing script not found or not executable: $script_file\" | tee -a \"$log_file\"\n                            exit 1\n                        fi\n                        ;;\n                esac\n                ;;\n            \"producer\")\n                # generates producer client.properties\n                cat > \"$client_props_file\" <<-ENDOFPRODUCER\nbootstrap.servers=$BOOTSTRAP_SERVERS\nacks=all\nretries=0\nbatch.size=16384\nlinger.ms=1\nbuffer.memory=33554432\nkey.serializer=org.apache.kafka.common.serialization.StringSerializer\nvalue.serializer=org.apache.kafka.common.serialization.StringSerializer\nENDOFPRODUCER\n                \n                # exports critical env vars\n                export BOOTSTRAP_SERVERS\n                export KAFKA_TOPICS\n                \n                case \"$KAFKA_MESSAGE_PROCESSING_MODE\" in\n                    \"echo\")\n                        echo \"Producer in echo mode - waiting for stdin input...\" | tee -a \"$log_file\"\n                        env BOOTSTRAP_SERVERS=\"$BOOTSTRAP_SERVERS\" KAFKA_TOPICS=\"$KAFKA_TOPICS\" \\\n                            kafka-console-producer.sh --bootstrap-server \"$BOOTSTRAP_SERVERS\" \\\n                            --topic \"$KAFKA_TOPICS\" \\\n                            --producer.config \"$client_props_file\" \\\n                            2>&1 | tee -a \"$log_file\"\n                        ;;\n                    \"file\")\n                        input_file=\"$KAFKA_MESSAGE_OUTPUT_DIR/producer_input_${client_id}.txt\"\n                        if [ -f \"$input_file\" ]; then\n                            env BOOTSTRAP_SERVERS=\"$BOOTSTRAP_SERVERS\" KAFKA_TOPICS=\"$KAFKA_TOPICS\" \\\n                                kafka-console-producer.sh --bootstrap-server \"$BOOTSTRAP_SERVERS\" \\\n                                --topic \"$KAFKA_TOPICS\" \\\n                                --producer.config \"$client_props_file\" \\\n                                < \"$input_file\" \\\n                                2>&1 | tee -a \"$log_file\"\n                        else\n                            echo \"ERROR: Producer input file not found: $input_file\" | tee -a \"$log_file\"\n                            echo \"Please create the file with messages to send: $input_file\" | tee -a \"$log_file\"\n                            exit 1\n                        fi\n                        ;;\n                    \"script\")\n                        script_file=\"$KAFKA_SCRIPTS_DIR/generate_messages.sh\"\n                        if [ -x \"$script_file\" ]; then\n                            \"$script_file\" 2>> \"$log_file\" | env BOOTSTRAP_SERVERS=\"$BOOTSTRAP_SERVERS\" KAFKA_TOPICS=\"$KAFKA_TOPICS\" \\\n                                kafka-console-producer.sh --bootstrap-server \"$BOOTSTRAP_SERVERS\" \\\n                                --topic \"$KAFKA_TOPICS\" \\\n                                --producer.config \"$client_props_file\" \\\n                                2>&1 | tee -a \"$log_file\"\n                        else\n                            echo \"ERROR: Message generation script not found or not executable: $script_file\" | tee -a \"$log_file\"\n                            exit 1\n                        fi\n                        ;;\n                esac\n                ;;\n            \"both\")\n                # runs producer and consumer in separate processes / starts consumer in background\n                (\n                    cat > \"${client_props_file}_consumer\" <<-ENDOFBOTHCONSUMER\nbootstrap.servers=$BOOTSTRAP_SERVERS\ngroup.id=flox-consumer-group-$client_id\nauto.offset.reset=earliest\nenable.auto.commit=true\nauto.commit.interval.ms=1000\nkey.deserializer=org.apache.kafka.common.serialization.StringDeserializer\nvalue.deserializer=org.apache.kafka.common.serialization.StringDeserializer\nENDOFBOTHCONSUMER\n\n                    case \"$KAFKA_MESSAGE_PROCESSING_MODE\" in\n                        \"echo\")\n                            env BOOTSTRAP_SERVERS=\"$BOOTSTRAP_SERVERS\" KAFKA_TOPICS=\"$KAFKA_TOPICS\" \\\n                                kafka-console-consumer.sh --bootstrap-server \"$BOOTSTRAP_SERVERS\" \\\n                                --topic \"$KAFKA_TOPICS\" \\\n                                --consumer.config \"${client_props_file}_consumer\" \\\n                                2>&1 | tee -a \"${log_file}_consumer\" &\n                            ;;\n                        \"file\")\n                            output_file=\"$KAFKA_MESSAGE_OUTPUT_DIR/client_${client_id}_consumer_messages.txt\"\n                            if [ \"$KAFKA_FILE_APPEND\" = \"true\" ]; then\n                                env BOOTSTRAP_SERVERS=\"$BOOTSTRAP_SERVERS\" KAFKA_TOPICS=\"$KAFKA_TOPICS\" \\\n                                    kafka-console-consumer.sh --bootstrap-server \"$BOOTSTRAP_SERVERS\" \\\n                                    --topic \"$KAFKA_TOPICS\" \\\n                                    --consumer.config \"${client_props_file}_consumer\" \\\n                                    2>> \"${log_file}_consumer\" >> \"$output_file\" &\n                            else\n                                env BOOTSTRAP_SERVERS=\"$BOOTSTRAP_SERVERS\" KAFKA_TOPICS=\"$KAFKA_TOPICS\" \\\n                                    kafka-console-consumer.sh --bootstrap-server \"$BOOTSTRAP_SERVERS\" \\\n                                    --topic \"$KAFKA_TOPICS\" \\\n                                    --consumer.config \"${client_props_file}_consumer\" \\\n                                    2>> \"${log_file}_consumer\" > \"$output_file\" &\n                            fi\n                            ;;\n                        \"script\")\n                            script_file=\"$KAFKA_SCRIPTS_DIR/process_messages.sh\"\n                            if [ -x \"$script_file\" ]; then\n                                env BOOTSTRAP_SERVERS=\"$BOOTSTRAP_SERVERS\" KAFKA_TOPICS=\"$KAFKA_TOPICS\" \\\n                                    kafka-console-consumer.sh --bootstrap-server \"$BOOTSTRAP_SERVERS\" \\\n                                    --topic \"$KAFKA_TOPICS\" \\\n                                    --consumer.config \"${client_props_file}_consumer\" \\\n                                    2>> \"${log_file}_consumer\" | \"$script_file\" 2>&1 | tee -a \"${log_file}_consumer\" &\n                            else\n                                echo \"ERROR: Processing script not found or not executable: $script_file\" | tee -a \"${log_file}_consumer\"\n                                exit 1\n                            fi\n                            ;;\n                    esac\n                ) &\n                CONSUMER_PID=$!\n                \n                # starts the producer\n                (\n                    # generates producer properties\n                    cat > \"${client_props_file}_producer\" <<-ENDOFBOTHPRODUCER\nbootstrap.servers=$BOOTSTRAP_SERVERS\nacks=all\nretries=0\nbatch.size=16384\nlinger.ms=1\nbuffer.memory=33554432\nkey.serializer=org.apache.kafka.common.serialization.StringSerializer\nvalue.serializer=org.apache.kafka.common.serialization.StringSerializer\nENDOFBOTHPRODUCER\n                    \n                    case \"$KAFKA_MESSAGE_PROCESSING_MODE\" in\n                        \"echo\")\n                            echo \"Producer in echo mode - waiting for stdin input...\" | tee -a \"${log_file}_producer\"\n                            env BOOTSTRAP_SERVERS=\"$BOOTSTRAP_SERVERS\" KAFKA_TOPICS=\"$KAFKA_TOPICS\" \\\n                                kafka-console-producer.sh --bootstrap-server \"$BOOTSTRAP_SERVERS\" \\\n                                --topic \"$KAFKA_TOPICS\" \\\n                                --producer.config \"${client_props_file}_producer\" \\\n                                2>&1 | tee -a \"${log_file}_producer\"\n                            ;;\n                        \"file\")\n                            input_file=\"$KAFKA_MESSAGE_OUTPUT_DIR/producer_input_${client_id}.txt\"\n                            if [ -f \"$input_file\" ]; then\n                                env BOOTSTRAP_SERVERS=\"$BOOTSTRAP_SERVERS\" KAFKA_TOPICS=\"$KAFKA_TOPICS\" \\\n                                    kafka-console-producer.sh --bootstrap-server \"$BOOTSTRAP_SERVERS\" \\\n                                    --topic \"$KAFKA_TOPICS\" \\\n                                    --producer.config \"${client_props_file}_producer\" \\\n                                    < \"$input_file\" \\\n                                    2>&1 | tee -a \"${log_file}_producer\"\n                            else\n                                echo \"ERROR: Producer input file not found: $input_file\" | tee -a \"${log_file}_producer\"\n                                echo \"Please create the file with messages to send: $input_file\" | tee -a \"${log_file}_producer\"\n                                exit 1\n                            fi\n                            ;;\n                        \"script\")\n                            script_file=\"$KAFKA_SCRIPTS_DIR/generate_messages.sh\"\n                            if [ -x \"$script_file\" ]; then\n                                \"$script_file\" 2>> \"${log_file}_producer\" | env BOOTSTRAP_SERVERS=\"$BOOTSTRAP_SERVERS\" KAFKA_TOPICS=\"$KAFKA_TOPICS\" \\\n                                    kafka-console-producer.sh --bootstrap-server \"$BOOTSTRAP_SERVERS\" \\\n                                    --topic \"$KAFKA_TOPICS\" \\\n                                    --producer.config \"${client_props_file}_producer\" \\\n                                    2>&1 | tee -a \"${log_file}_producer\"\n                            else\n                                echo \"ERROR: Message generation script not found or not executable: $script_file\" | tee -a \"${log_file}_producer\"\n                                exit 1\n                            fi\n                            ;;\n                    esac\n                ) &\n                PRODUCER_PID=$!\n                \n                # waits for both processes\n                wait $CONSUMER_PID $PRODUCER_PID\n                ;;\n        esac\n    }\n    \n    # starts client instances\n    for ((i=1; i<=KAFKA_CLIENT_COUNT; i++)); do\n        if [ \"$KAFKA_CLIENT_PARALLEL\" = \"true\" ]; then\n            run_client_instance $i &\n            client_pids+=($!)\n            echo \"Started client instance $i in background (PID: ${client_pids[-1]})\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/service.log\"\n        else\n            echo \"Starting client instance $i in foreground\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/service.log\"\n            run_client_instance $i\n        fi\n    done\n    \n    # waits for background processes if running in parallel\n    if [ \"$KAFKA_CLIENT_PARALLEL\" = \"true\" ]; then\n        echo \"Waiting for all client instances to complete...\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/service.log\"\n        wait ${client_pids[@]}\n    fi\n    \n    echo \"All client instances completed\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/service.log\"\n    \nelse\n    # handles broker/controller mode logic\n    echo \"Starting Kafka in $KAFKA_MODE mode\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    echo \"KAFKA_NODE_ID = $KAFKA_NODE_ID\" >> \"$FLOX_ENV_CACHE/kafka-logs/service.log\"\n    echo \"KAFKA_HOST = $KAFKA_HOST\" >> \"$FLOX_ENV_CACHE/kafka-logs/service.log\"\n    echo \"KAFKA_PORT = $KAFKA_PORT\" >> \"$FLOX_ENV_CACHE/kafka-logs/service.log\"\n    echo \"KRAFT_CONTROLLER_PORT = $KRAFT_CONTROLLER_PORT\" >> \"$FLOX_ENV_CACHE/kafka-logs/service.log\"\n    echo \"KAFKA_CLUSTER_ID = $KAFKA_CLUSTER_ID\" >> \"$FLOX_ENV_CACHE/kafka-logs/service.log\"\n    echo \"KAFKA_DATA_DIR = $KAFKA_DATA_DIR\" >> \"$FLOX_ENV_CACHE/kafka-logs/service.log\"\n\n    # ensures data directory exists\n    mkdir -p \"$KAFKA_DATA_DIR\"\n\n    # regenerates kraft.properties from base file\n    if [ -f \"$KAFKA_CONFIG_DIR/kraft.properties.base\" ]; then\n        cp \"$KAFKA_CONFIG_DIR/kraft.properties.base\" \"$KAFKA_CONFIG_DIR/kraft.properties\"\n    else\n        echo \"ERROR: kraft.properties.base not found\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n        exit 1\n    fi\n    \n    # adds runtime config settings if set\n    if [ -n \"$KAFKA_NUM_NETWORK_THREADS\" ]; then\n        echo \"num.network.threads=$KAFKA_NUM_NETWORK_THREADS\" >> \"$KAFKA_CONFIG_DIR/kraft.properties\"\n        echo \"  ✓ Applied num.network.threads=$KAFKA_NUM_NETWORK_THREADS\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    fi\n    if [ -n \"$KAFKA_NUM_IO_THREADS\" ]; then\n        echo \"num.io.threads=$KAFKA_NUM_IO_THREADS\" >> \"$KAFKA_CONFIG_DIR/kraft.properties\"\n        echo \"  ✓ Applied num.io.threads=$KAFKA_NUM_IO_THREADS\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    fi\n    if [ -n \"$KAFKA_NUM_REPLICA_FETCHERS\" ]; then\n        echo \"num.replica.fetchers=$KAFKA_NUM_REPLICA_FETCHERS\" >> \"$KAFKA_CONFIG_DIR/kraft.properties\"\n        echo \"  ✓ Applied num.replica.fetchers=$KAFKA_NUM_REPLICA_FETCHERS\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    fi\n    if [ -n \"$KAFKA_MESSAGE_MAX_BYTES\" ]; then\n        echo \"message.max.bytes=$KAFKA_MESSAGE_MAX_BYTES\" >> \"$KAFKA_CONFIG_DIR/kraft.properties\"\n        echo \"  ✓ Applied message.max.bytes=$KAFKA_MESSAGE_MAX_BYTES\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    fi\n    if [ -n \"$KAFKA_AUTO_CREATE_TOPICS\" ]; then\n        echo \"auto.create.topics.enable=$KAFKA_AUTO_CREATE_TOPICS\" >> \"$KAFKA_CONFIG_DIR/kraft.properties\"\n        echo \"  ✓ Applied auto.create.topics.enable=$KAFKA_AUTO_CREATE_TOPICS\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    fi\n    if [ -n \"$KAFKA_LOG_RETENTION_HOURS\" ]; then\n        echo \"log.retention.hours=$KAFKA_LOG_RETENTION_HOURS\" >> \"$KAFKA_CONFIG_DIR/kraft.properties\"\n        echo \"  ✓ Applied log.retention.hours=$KAFKA_LOG_RETENTION_HOURS\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    fi\n\n    # formats storage if meta.properties not exist\n    if [ ! -f \"$KAFKA_DATA_DIR/meta.properties\" ]; then\n        echo \"  ℹ️  Formatting KRaft storage directory (first-time setup)\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n        echo \"  ℹ️  Using cluster ID: $KAFKA_CLUSTER_ID\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n\n        if KAFKA_CLUSTER_ID=$KAFKA_CLUSTER_ID KAFKA_DATA_DIR=$KAFKA_DATA_DIR kafka-storage.sh format --cluster-id \"$KAFKA_CLUSTER_ID\" --config \"$KAFKA_CONFIG_DIR/kraft.properties\"; then\n            echo \"  ✓ Storage formatted successfully\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n        else\n            echo \"  ❌ ERROR: Storage format failed\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n            exit 1\n        fi\n    else\n        echo \"  ✓ Using existing KRaft storage directory\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    fi\n\n    # checks controller connectivity if in  broker mode\n    if [ \"$KAFKA_MODE\" = \"kraft-broker\" ]; then\n        echo \"  ℹ️  Checking controller connectivity...\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n        CONTROLLER_REACHABLE=false\n        \n        # parses controller quorum to check each controller\n        IFS=',' read -ra CONTROLLERS <<< \"$CONTROLLER_QUORUM\"\n        for controller in \"${CONTROLLERS[@]}\"; do\n            # extracts host:port from \"id@host:port\"\n            CONTROLLER_ADDRESS=${controller#*@}\n            CONTROLLER_HOST=${CONTROLLER_ADDRESS%:*}\n            CONTROLLER_PORT=${CONTROLLER_ADDRESS#*:}\n            \n            if nc -z \"$CONTROLLER_HOST\" \"$CONTROLLER_PORT\" >/dev/null 2>&1; then\n                echo \"  ✓ Controller reachable at $CONTROLLER_HOST:$CONTROLLER_PORT\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n                CONTROLLER_REACHABLE=true\n                break\n            fi\n        done\n        \n        if [ \"$CONTROLLER_REACHABLE\" = false ]; then\n            echo \"  ⚠️  WARNING: No controllers in quorum are reachable\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n            echo \"  ⚠️  Controller quorum: $CONTROLLER_QUORUM\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n            echo \"  ⚠️  Continuing anyway - controllers might come up later\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n        fi\n    fi\n\n    # exports kafka env vars\n    [ -n \"$KAFKA_HEAP_OPTS\" ] && export KAFKA_HEAP_OPTS\n    [ -n \"$KAFKA_JVM_PERFORMANCE_OPTS\" ] && export KAFKA_JVM_PERFORMANCE_OPTS\n    [ -n \"$KAFKA_JMX_OPTS\" ] && export KAFKA_JMX_OPTS\n    \n    # logs environment settings if set\n    if [ -n \"$KAFKA_JMX_OPTS\" ]; then\n        echo \"  ✓ JMX enabled: $KAFKA_JMX_OPTS\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    fi\n    if [ -n \"$KAFKA_HEAP_OPTS\" ]; then\n        echo \"  ✓ Custom heap settings: $KAFKA_HEAP_OPTS\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    fi\n    if [ -n \"$KAFKA_JVM_PERFORMANCE_OPTS\" ]; then\n        echo \"  ✓ JVM performance options: $KAFKA_JVM_PERFORMANCE_OPTS\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    fi\n    \n    # starts kafka\n    echo \"\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    echo \"Starting Kafka $KAFKA_MODE service...\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    echo \"  - Node ID: $KAFKA_NODE_ID\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    echo \"  - Host: $KAFKA_HOST\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    \n    if [ \"$KAFKA_MODE\" = \"kraft-controller\" ]; then\n        echo \"  - Controller Port: $KRAFT_CONTROLLER_PORT\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n        echo \"  - Quorum: $CONTROLLER_QUORUM\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    elif [ \"$KAFKA_MODE\" = \"kraft-broker\" ]; then\n        echo \"  - Broker Port: $KAFKA_PORT\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n        echo \"  - Controller Quorum: $CONTROLLER_QUORUM\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    else  # kraft-combined\n        echo \"  - Broker Port: $KAFKA_PORT\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n        echo \"  - Controller Port: $KRAFT_CONTROLLER_PORT\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    fi\n    \n    echo \"  - Data directory: $KAFKA_DATA_DIR\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    echo \"  - Config file: $KAFKA_CONFIG_DIR/kraft.properties\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    echo \"\" | tee -a \"$FLOX_ENV_CACHE/kafka-logs/startup.log\"\n    \n    # runs kafka\n    exec kafka-server-start.sh \"$KAFKA_CONFIG_DIR/kraft.properties\"\nfi\n"
      }
    }
  },
  "packages": [
    {
      "attr_path": "coreutils",
      "broken": false,
      "derivation": "/nix/store/1nwy6zrysrzrxzlnjsvlbqj063wvzj6g-coreutils-9.6.drv",
      "description": "GNU Core Utilities",
      "install_id": "coreutils",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "coreutils-9.6",
      "pname": "coreutils",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:36:22.225687Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "9.6",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "debug": "/nix/store/0bw9z4w1ji3p4s3fkiazsyjg2l44m37v-coreutils-9.6-debug",
        "info": "/nix/store/4fsz8fn9m2v325zwbbn8w6dkjxrgnssz-coreutils-9.6-info",
        "out": "/nix/store/zfwaliz66856jv0dm10b2miy1krnx5p7-coreutils-9.6"
      },
      "system": "aarch64-linux",
      "group": "darwin-tools",
      "priority": 5
    },
    {
      "attr_path": "coreutils",
      "broken": false,
      "derivation": "/nix/store/d9qg08k6sqm81863f9j897dac9wbq7c6-coreutils-9.6.drv",
      "description": "GNU Core Utilities",
      "install_id": "coreutils",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "coreutils-9.6",
      "pname": "coreutils",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T05:14:16.837255Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "9.6",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "debug": "/nix/store/pq5ffz4lgybwy1g4apkrxgjazh0xpy0g-coreutils-9.6-debug",
        "info": "/nix/store/i60bl9mvpn32ch312p0bll6455swb1aa-coreutils-9.6-info",
        "out": "/nix/store/h5rn37dd6vfvr9xb0jq85sq8hf6xchry-coreutils-9.6"
      },
      "system": "x86_64-linux",
      "group": "darwin-tools",
      "priority": 5
    },
    {
      "attr_path": "coreutils",
      "broken": false,
      "derivation": "/nix/store/kh1np1jqnb1bzz8yl4jax6h5ydz0f2ws-coreutils-9.6.drv",
      "description": "GNU Core Utilities",
      "install_id": "coreutils",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "coreutils-9.6",
      "pname": "coreutils",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:18:42.190731Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "9.6",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "info": "/nix/store/h1jw31m6jii5kndx3sxqn79wlppa3gqn-coreutils-9.6-info",
        "out": "/nix/store/r9y8p97lcpm3kn03jsp157qr3kjhbxyh-coreutils-9.6"
      },
      "system": "aarch64-darwin",
      "group": "darwin-tools",
      "priority": 5
    },
    {
      "attr_path": "coreutils",
      "broken": false,
      "derivation": "/nix/store/yl58iny131vn566j3w2jjc0rwircyaqi-coreutils-9.6.drv",
      "description": "GNU Core Utilities",
      "install_id": "coreutils",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "coreutils-9.6",
      "pname": "coreutils",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:53:39.342895Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "9.6",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "info": "/nix/store/pxnmw7x46594xkwx8x75sjk6wn5p37p4-coreutils-9.6-info",
        "out": "/nix/store/4zj8zn4r000ydbm1nv3lyr6dfqkgcbmw-coreutils-9.6"
      },
      "system": "x86_64-darwin",
      "group": "darwin-tools",
      "priority": 5
    },
    {
      "attr_path": "gawk",
      "broken": false,
      "derivation": "/nix/store/5y5hiji7rmbdawyc55dhx2nl2imj6q9j-gawk-5.3.1.drv",
      "description": "GNU implementation of the Awk programming language",
      "install_id": "gawk",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "gawk-5.3.1",
      "pname": "gawk",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:36:22.981097Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "5.3.1",
      "outputs_to_install": [
        "man",
        "out"
      ],
      "outputs": {
        "info": "/nix/store/b85wijgg7hkc5pp4m20jqdwzhs1z35n4-gawk-5.3.1-info",
        "man": "/nix/store/8gl2g82iy368gmwl915valgdayvh05cj-gawk-5.3.1-man",
        "out": "/nix/store/2bqdjg0cd39065pyra02c55xcq6mns95-gawk-5.3.1"
      },
      "system": "aarch64-linux",
      "group": "darwin-tools",
      "priority": 5
    },
    {
      "attr_path": "gawk",
      "broken": false,
      "derivation": "/nix/store/3q19lx413z1lcsimbjyby00lx6rd7bfs-gawk-5.3.1.drv",
      "description": "GNU implementation of the Awk programming language",
      "install_id": "gawk",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "gawk-5.3.1",
      "pname": "gawk",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T05:14:17.681221Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "5.3.1",
      "outputs_to_install": [
        "man",
        "out"
      ],
      "outputs": {
        "info": "/nix/store/4n2af8zgwp8ldkrxjarhii8zqznbqyb4-gawk-5.3.1-info",
        "man": "/nix/store/iv3c03ygjfh4f7x0d61b7x8m71zlqghl-gawk-5.3.1-man",
        "out": "/nix/store/qi25cvn9j1xyvl9p7lp8nw9wqk5k648r-gawk-5.3.1"
      },
      "system": "x86_64-linux",
      "group": "darwin-tools",
      "priority": 5
    },
    {
      "attr_path": "gawk",
      "broken": false,
      "derivation": "/nix/store/0swii45nakd7jgq5q6nsn14c6vivxk32-gawk-5.3.1.drv",
      "description": "GNU implementation of the Awk programming language",
      "install_id": "gawk",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "gawk-5.3.1",
      "pname": "gawk",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:18:42.581298Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "5.3.1",
      "outputs_to_install": [
        "man",
        "out"
      ],
      "outputs": {
        "info": "/nix/store/9c17rg59qkvg8qrgsv8c2l3fpvrqlg8r-gawk-5.3.1-info",
        "man": "/nix/store/r6my8drvarl15wcbpxr0zl36sj9c92di-gawk-5.3.1-man",
        "out": "/nix/store/w7m7ys9nqgwqf0h2rwcw50vhgyysqhv0-gawk-5.3.1"
      },
      "system": "aarch64-darwin",
      "group": "darwin-tools",
      "priority": 5
    },
    {
      "attr_path": "gawk",
      "broken": false,
      "derivation": "/nix/store/5r8rscndakqpwpgi9gqk0vqbgqgbrb5w-gawk-5.3.1.drv",
      "description": "GNU implementation of the Awk programming language",
      "install_id": "gawk",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "gawk-5.3.1",
      "pname": "gawk",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:53:39.736009Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "5.3.1",
      "outputs_to_install": [
        "man",
        "out"
      ],
      "outputs": {
        "info": "/nix/store/zjfkgmq5zrfr313h7vza8w73kj1lpmcr-gawk-5.3.1-info",
        "man": "/nix/store/ydwn41jgqj9cr8f3ywkfd8v0dmyvrr2a-gawk-5.3.1-man",
        "out": "/nix/store/a57qq11ahngvyn4wdy2c21b4yrli177f-gawk-5.3.1"
      },
      "system": "x86_64-darwin",
      "group": "darwin-tools",
      "priority": 5
    },
    {
      "attr_path": "gnused",
      "broken": false,
      "derivation": "/nix/store/bvfc94q7iaqdk53p2i87krzf96fiblvk-gnused-4.9.drv",
      "description": "GNU sed, a batch stream editor",
      "install_id": "gnused",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "gnused-4.9",
      "pname": "gnused",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:36:23.469903Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "4.9",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "info": "/nix/store/s1jx0n2b73jjl3yzs94mhprk584yqlmb-gnused-4.9-info",
        "out": "/nix/store/svfwjzik1zgd7rdwii95jkw6pzl91cgq-gnused-4.9"
      },
      "system": "aarch64-linux",
      "group": "darwin-tools",
      "priority": 5
    },
    {
      "attr_path": "gnused",
      "broken": false,
      "derivation": "/nix/store/f9hww3k6x8djmy8j95bpqpz8rg6qi0mp-gnused-4.9.drv",
      "description": "GNU sed, a batch stream editor",
      "install_id": "gnused",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "gnused-4.9",
      "pname": "gnused",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T05:14:18.254011Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "4.9",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "info": "/nix/store/zvwfjxlkcv2pyj1dkqlm5shmx9059hzj-gnused-4.9-info",
        "out": "/nix/store/bz6z6c26ajk870qxipxkkp8a6cympj3l-gnused-4.9"
      },
      "system": "x86_64-linux",
      "group": "darwin-tools",
      "priority": 5
    },
    {
      "attr_path": "gnused",
      "broken": false,
      "derivation": "/nix/store/khzaw8bx5zxyk7g5h7w2xrqq5czpgwk4-gnused-4.9.drv",
      "description": "GNU sed, a batch stream editor",
      "install_id": "gnused",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "gnused-4.9",
      "pname": "gnused",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:18:42.725301Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "4.9",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "info": "/nix/store/8gv6x7m1991sqdwvrhb01818lanx9nxz-gnused-4.9-info",
        "out": "/nix/store/yfk1iriif0acn91as6qg96nwz6hs93si-gnused-4.9"
      },
      "system": "aarch64-darwin",
      "group": "darwin-tools",
      "priority": 5
    },
    {
      "attr_path": "gnused",
      "broken": false,
      "derivation": "/nix/store/ww763gvc3sas8002cc3nk4cg00a99357-gnused-4.9.drv",
      "description": "GNU sed, a batch stream editor",
      "install_id": "gnused",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "gnused-4.9",
      "pname": "gnused",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:53:39.910598Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "4.9",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "info": "/nix/store/fr5ywbk03g9a4b3a8sfx2m9sw16vamdv-gnused-4.9-info",
        "out": "/nix/store/i18y4ld5k1jk91vinswb9lk1cnkc7s30-gnused-4.9"
      },
      "system": "x86_64-darwin",
      "group": "darwin-tools",
      "priority": 5
    },
    {
      "attr_path": "netcat",
      "broken": false,
      "derivation": "/nix/store/r6ij1yc7dcbcmjr22k9d205ghy2kc19w-libressl-4.0.0.drv",
      "description": "Utility which reads and writes data across network connections — LibreSSL implementation",
      "install_id": "netcat",
      "license": "[ Public Domain, BSD-4-Clause, 0BSD, BSD-3-Clause, GPL-3.0, ISC, OpenSSL ]",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "libressl-4.0.0",
      "pname": "netcat",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:36:32.180671Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "4.0.0",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/d0pj5ps2c8x34j7s9lbk5qpwpjpk565w-libressl-4.0.0-bin",
        "dev": "/nix/store/hwbkaxv60vc9a7fjq1q2h7dd9h9fvg0v-libressl-4.0.0-dev",
        "man": "/nix/store/zq4rhh5x335pff66jy83a6xnn9gn79nz-libressl-4.0.0-man",
        "nc": "/nix/store/1p9bsb5k0rmbcsrcsk393qxkb2cgq3rv-libressl-4.0.0-nc",
        "out": "/nix/store/syivc4ik5bf9jfly2arcws9ag213b3js-libressl-4.0.0"
      },
      "system": "aarch64-linux",
      "group": "env-tools",
      "priority": 5
    },
    {
      "attr_path": "netcat",
      "broken": false,
      "derivation": "/nix/store/151q7v6pdf9zf6039fp7c3dqbf0zf8zj-libressl-4.0.0.drv",
      "description": "Utility which reads and writes data across network connections — LibreSSL implementation",
      "install_id": "netcat",
      "license": "[ Public Domain, BSD-4-Clause, 0BSD, BSD-3-Clause, GPL-3.0, ISC, OpenSSL ]",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "libressl-4.0.0",
      "pname": "netcat",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T05:14:28.988383Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "4.0.0",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/1r8dranh7vx4p5875yfmpdwhfbq11f5c-libressl-4.0.0-bin",
        "dev": "/nix/store/grjphbg37prg55f0nrxmpm4sm70fa3ma-libressl-4.0.0-dev",
        "man": "/nix/store/mn3f2g2arb8g0q2lbbw0l2q7900xm5s2-libressl-4.0.0-man",
        "nc": "/nix/store/2yr6cmqxj7lggia8lblfc2s274rjvvl4-libressl-4.0.0-nc",
        "out": "/nix/store/jh9lb60fya9bhdc41r10zi7bxqrzmds6-libressl-4.0.0"
      },
      "system": "x86_64-linux",
      "group": "env-tools",
      "priority": 5
    },
    {
      "attr_path": "netcat",
      "broken": false,
      "derivation": "/nix/store/y3rk90mr4wwbqv503ipnw79j0r1hydqg-libressl-4.0.0.drv",
      "description": "Utility which reads and writes data across network connections — LibreSSL implementation",
      "install_id": "netcat",
      "license": "[ Public Domain, BSD-4-Clause, 0BSD, BSD-3-Clause, GPL-3.0, ISC, OpenSSL ]",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "libressl-4.0.0",
      "pname": "netcat",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:18:44.917090Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "4.0.0",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/r91wvnl6wa645ph9kfwajs317czf3a3g-libressl-4.0.0-bin",
        "dev": "/nix/store/737c41xy0s9va151l81nka0bf4ycw3lv-libressl-4.0.0-dev",
        "man": "/nix/store/34vs6ddv8d2qx6hzwvm0iv5xf7qhj384-libressl-4.0.0-man",
        "nc": "/nix/store/9b6dj2mkg3wp13ymsa5rgmj39zlrrl1j-libressl-4.0.0-nc",
        "out": "/nix/store/59nsx7vrny043wpgwc81ap4yk2bbiyqj-libressl-4.0.0"
      },
      "system": "aarch64-darwin",
      "group": "env-tools",
      "priority": 5
    },
    {
      "attr_path": "netcat",
      "broken": false,
      "derivation": "/nix/store/yhhnhlnnpkvhwni0pczrhgr0pr72a523-libressl-4.0.0.drv",
      "description": "Utility which reads and writes data across network connections — LibreSSL implementation",
      "install_id": "netcat",
      "license": "[ Public Domain, BSD-4-Clause, 0BSD, BSD-3-Clause, GPL-3.0, ISC, OpenSSL ]",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "libressl-4.0.0",
      "pname": "netcat",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:53:42.140875Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "4.0.0",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/irbi0adjg6pi52j9dmij6wsgk2pqw7ix-libressl-4.0.0-bin",
        "dev": "/nix/store/hcd7zh45brk1p1g1hbj507d1zv5xa2q1-libressl-4.0.0-dev",
        "man": "/nix/store/4hwy73zyaz93avi93pkn8qym777f116z-libressl-4.0.0-man",
        "nc": "/nix/store/sr40fasa96b9rwr678xkcwzf2a42fajm-libressl-4.0.0-nc",
        "out": "/nix/store/2scb2l5fqzgld083rs7jryh7kmvn16cl-libressl-4.0.0"
      },
      "system": "x86_64-darwin",
      "group": "env-tools",
      "priority": 5
    },
    {
      "attr_path": "unixtools.netstat",
      "broken": false,
      "derivation": "/nix/store/xr3kv0zpnxwhdfqkg4xvcfya08n77x08-netstat-net-tools-2.10.drv",
      "install_id": "netstat",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "netstat-net-tools-2.10",
      "pname": "netstat",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:37:49.189097Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "2.10",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/09wd8nx0b94jcg9dbpv63icqrbpq9c9s-netstat-net-tools-2.10"
      },
      "system": "aarch64-linux",
      "group": "env-tools",
      "priority": 5
    },
    {
      "attr_path": "unixtools.netstat",
      "broken": false,
      "derivation": "/nix/store/a14syc4si93iagwhxalwq8pr890xpzs2-netstat-net-tools-2.10.drv",
      "install_id": "netstat",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "netstat-net-tools-2.10",
      "pname": "netstat",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T05:15:54.422338Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "2.10",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/swdv61qppqpawr9dfz639swkg2d39ipc-netstat-net-tools-2.10"
      },
      "system": "x86_64-linux",
      "group": "env-tools",
      "priority": 5
    },
    {
      "attr_path": "unixtools.netstat",
      "broken": false,
      "derivation": "/nix/store/j5hhs7jp4ip7dh2pm82fzixa8jpa5fyn-netstat-network_cmds-698.60.4.drv",
      "install_id": "netstat",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "netstat-network_cmds-698.60.4",
      "pname": "netstat",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:19:37.304777Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "698.60.4",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/cx2y3rm6lc26nwrd2k1v4b70658mvjv8-netstat-network_cmds-698.60.4"
      },
      "system": "aarch64-darwin",
      "group": "env-tools",
      "priority": 5
    },
    {
      "attr_path": "unixtools.netstat",
      "broken": false,
      "derivation": "/nix/store/ppm6kha9bx50bzhvyn4vllcwxmvf1xqh-netstat-network_cmds-698.60.4.drv",
      "install_id": "netstat",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "netstat-network_cmds-698.60.4",
      "pname": "netstat",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:54:34.553790Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "698.60.4",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/2ldr1xxpy6c86pwmk9jkaas02fvwfxx8-netstat-network_cmds-698.60.4"
      },
      "system": "x86_64-darwin",
      "group": "env-tools",
      "priority": 5
    },
    {
      "attr_path": "gnugrep",
      "broken": false,
      "derivation": "/nix/store/hhj7q7s8g2bfczvlbrfi3abkhbnw0d4l-gnugrep-3.11.drv",
      "description": "GNU implementation of the Unix grep command",
      "install_id": "gnugrep",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "gnugrep-3.11",
      "pname": "gnugrep",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:36:23.461538Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "3.11",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "info": "/nix/store/drdxz5p29n4m01464lm4krn6hb3vh4pn-gnugrep-3.11-info",
        "out": "/nix/store/g6xzw8ig9afmwl91ql2q06gignjrv67a-gnugrep-3.11"
      },
      "system": "aarch64-linux",
      "group": "gnugrep",
      "priority": 5
    },
    {
      "attr_path": "gnugrep",
      "broken": false,
      "derivation": "/nix/store/ijl51lmjqydk0lbhixs7jwcwl892lw63-gnugrep-3.11.drv",
      "description": "GNU implementation of the Unix grep command",
      "install_id": "gnugrep",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "gnugrep-3.11",
      "pname": "gnugrep",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T05:14:18.244870Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "3.11",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "info": "/nix/store/z1vq2h25hmb1mwsvpg9cw8zaf73jpx9s-gnugrep-3.11-info",
        "out": "/nix/store/8i12gp78n1m9z794miwbsclgyyp5nm5s-gnugrep-3.11"
      },
      "system": "x86_64-linux",
      "group": "gnugrep",
      "priority": 5
    },
    {
      "attr_path": "gnugrep",
      "broken": false,
      "derivation": "/nix/store/w3vjc0a4z6azmfq946v3dcfqh6xcmdcw-gnugrep-3.11.drv",
      "description": "GNU implementation of the Unix grep command",
      "install_id": "gnugrep",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "gnugrep-3.11",
      "pname": "gnugrep",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:18:42.720210Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "3.11",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "info": "/nix/store/hcb9ayahnrkjdp19cybanwq5l0jac0kz-gnugrep-3.11-info",
        "out": "/nix/store/vyfs7l798mabb0kqw5v7xk87mzjn3d3x-gnugrep-3.11"
      },
      "system": "aarch64-darwin",
      "group": "gnugrep",
      "priority": 5
    },
    {
      "attr_path": "gnugrep",
      "broken": false,
      "derivation": "/nix/store/7g1nkqc5sprn1k97qmbfi2vka8ir1hp8-gnugrep-3.11.drv",
      "description": "GNU implementation of the Unix grep command",
      "install_id": "gnugrep",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "gnugrep-3.11",
      "pname": "gnugrep",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:53:39.905376Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "3.11",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "info": "/nix/store/h3dyjzs9y34g3mycmifx9rfi35pv75gv-gnugrep-3.11-info",
        "out": "/nix/store/w006g66vssk3hhgv7vm23fmnazqyd9rl-gnugrep-3.11"
      },
      "system": "x86_64-darwin",
      "group": "gnugrep",
      "priority": 5
    },
    {
      "attr_path": "bat",
      "broken": false,
      "derivation": "/nix/store/x34py05hr9kbqq3v7yj1w5rbrd7lj2hc-bat-0.25.0.drv",
      "description": "Cat(1) clone with syntax highlighting and Git integration",
      "install_id": "bat",
      "license": "[ Apache-2.0, MIT ]",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "bat-0.25.0",
      "pname": "bat",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:36:21.880660Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "0.25.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/aqpwblil73wrjvjckhagjdwbbj8y6qpm-bat-0.25.0"
      },
      "system": "aarch64-linux",
      "group": "helper-tools",
      "priority": 5
    },
    {
      "attr_path": "bat",
      "broken": false,
      "derivation": "/nix/store/y2b64irmqc3qmlzjqc3r8r6imclfbiii-bat-0.25.0.drv",
      "description": "Cat(1) clone with syntax highlighting and Git integration",
      "install_id": "bat",
      "license": "[ Apache-2.0, MIT ]",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "bat-0.25.0",
      "pname": "bat",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T05:14:16.441436Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "0.25.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/znb9lva77lsydvmy3ra1h0ilzm4fgkgc-bat-0.25.0"
      },
      "system": "x86_64-linux",
      "group": "helper-tools",
      "priority": 5
    },
    {
      "attr_path": "bat",
      "broken": false,
      "derivation": "/nix/store/zv04rfzmqbkibdxai2jzqykgc7l245df-bat-0.25.0.drv",
      "description": "Cat(1) clone with syntax highlighting and Git integration",
      "install_id": "bat",
      "license": "[ Apache-2.0, MIT ]",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "bat-0.25.0",
      "pname": "bat",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:18:41.922348Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "0.25.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/29xjspshldxxsx7ff6fs6n8nz7rwwa0n-bat-0.25.0"
      },
      "system": "aarch64-darwin",
      "group": "helper-tools",
      "priority": 5
    },
    {
      "attr_path": "bat",
      "broken": false,
      "derivation": "/nix/store/h4jyxngwni1w7zzv586c4izw4j6cwiq4-bat-0.25.0.drv",
      "description": "Cat(1) clone with syntax highlighting and Git integration",
      "install_id": "bat",
      "license": "[ Apache-2.0, MIT ]",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "bat-0.25.0",
      "pname": "bat",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:53:39.088601Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "0.25.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/zsjjqxpx1m3n1677jsk3viy84rxhh7s5-bat-0.25.0"
      },
      "system": "x86_64-darwin",
      "group": "helper-tools",
      "priority": 5
    },
    {
      "attr_path": "curl",
      "broken": false,
      "derivation": "/nix/store/yq3cgczhqmmrwclib223sw30cv5bjnsp-curl-8.12.1.drv",
      "description": "Command line tool for transferring files with URL syntax",
      "install_id": "curl",
      "license": "curl",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "curl-8.12.1",
      "pname": "curl",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:36:22.299111Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "8.12.1",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/hvlljyxp5xzrv719f5j7m7gnyb87mx41-curl-8.12.1-bin",
        "debug": "/nix/store/z8lpvdvih1mspz5j1lsbgagsjpl2wizw-curl-8.12.1-debug",
        "dev": "/nix/store/npbpw2121z4akxngf176q1mdlxfkwv0j-curl-8.12.1-dev",
        "devdoc": "/nix/store/r6kp2rzlm8vfflnzrhsf21b20ixgmpfp-curl-8.12.1-devdoc",
        "man": "/nix/store/cb83qlmflk1w18ndysbbm9hvg053w3f6-curl-8.12.1-man",
        "out": "/nix/store/gy6v84p7iy8p2wy7w0qh56vbqwz446kk-curl-8.12.1"
      },
      "system": "aarch64-linux",
      "group": "helper-tools",
      "priority": 5
    },
    {
      "attr_path": "curl",
      "broken": false,
      "derivation": "/nix/store/c7phcbkl7nzja980jnyy0g1dni8qb782-curl-8.12.1.drv",
      "description": "Command line tool for transferring files with URL syntax",
      "install_id": "curl",
      "license": "curl",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "curl-8.12.1",
      "pname": "curl",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T05:14:16.929266Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "8.12.1",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/16g6gyg131k8vgna13ilb4v9msh5fmi9-curl-8.12.1-bin",
        "debug": "/nix/store/v7kw0dv1r94d7xjknibh53wl8yqwinh8-curl-8.12.1-debug",
        "dev": "/nix/store/0rnns5hhxpvx08p0k3j6bhivj70y6wli-curl-8.12.1-dev",
        "devdoc": "/nix/store/mxjg45wa0ibsyzlilbiiy3hqbpn5zfxw-curl-8.12.1-devdoc",
        "man": "/nix/store/y8h3k07g8hpbs8ifx6vxlbh2kfpl4m65-curl-8.12.1-man",
        "out": "/nix/store/kmq714baxkd5yzpnbp09b7dhnks6m74q-curl-8.12.1"
      },
      "system": "x86_64-linux",
      "group": "helper-tools",
      "priority": 5
    },
    {
      "attr_path": "curl",
      "broken": false,
      "derivation": "/nix/store/vdyh7cx27q7mga5i15cqlkj3rl4q1zm7-curl-8.12.1.drv",
      "description": "Command line tool for transferring files with URL syntax",
      "install_id": "curl",
      "license": "curl",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "curl-8.12.1",
      "pname": "curl",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:18:42.222157Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "8.12.1",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/krgqarvv8y1xr2f7z5vxxva3nn7d1x8l-curl-8.12.1-bin",
        "dev": "/nix/store/8rsm3wrn90wm3h9bcr44j2z5g3qlnq8w-curl-8.12.1-dev",
        "devdoc": "/nix/store/mcxbd00pvp9z2p3baqjypiirrnxyqn1i-curl-8.12.1-devdoc",
        "man": "/nix/store/nxxww0dn65fw7aky9zvghsykr0syb8lg-curl-8.12.1-man",
        "out": "/nix/store/r011ii30b9gphcrwppszgv9bnd6d605r-curl-8.12.1"
      },
      "system": "aarch64-darwin",
      "group": "helper-tools",
      "priority": 5
    },
    {
      "attr_path": "curl",
      "broken": false,
      "derivation": "/nix/store/fq1birpdcm24zlsq0hnhq7sbaalyjzj1-curl-8.12.1.drv",
      "description": "Command line tool for transferring files with URL syntax",
      "install_id": "curl",
      "license": "curl",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "curl-8.12.1",
      "pname": "curl",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:53:39.375004Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "8.12.1",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/3nm8cgv7xg1qadvgcshmvspmsr7frvp2-curl-8.12.1-bin",
        "dev": "/nix/store/vij71byxpyrpxsyvb6z4vh75hj51la5f-curl-8.12.1-dev",
        "devdoc": "/nix/store/6zf74b4kalqx1653vwsv7vpng113igi7-curl-8.12.1-devdoc",
        "man": "/nix/store/4aphz90jsdfzx5cfzl5nfnml7czswg09-curl-8.12.1-man",
        "out": "/nix/store/fswhs12ddagbw24a1gr0rv7sm7aqj7c1-curl-8.12.1"
      },
      "system": "x86_64-darwin",
      "group": "helper-tools",
      "priority": 5
    },
    {
      "attr_path": "jq",
      "broken": false,
      "derivation": "/nix/store/mf49wmr7dzwax8vncr8gs77lgnajaarx-jq-1.7.1.drv",
      "description": "Lightweight and flexible command-line JSON processor",
      "install_id": "jq",
      "license": "MIT",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "jq-1.7.1",
      "pname": "jq",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:36:24.728267Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "1.7.1",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/k8if483b70jz7k45v7r3zgpwx600slaz-jq-1.7.1-bin",
        "dev": "/nix/store/l89ym36dx7cr6mxlgxlgzdg9wpi3sfn1-jq-1.7.1-dev",
        "doc": "/nix/store/cy1fhm3bshrpa32ld7vv354hwgd4nxlf-jq-1.7.1-doc",
        "man": "/nix/store/857krxj0db5bri4z9gks0hfgw6bzv9wg-jq-1.7.1-man",
        "out": "/nix/store/vdigqrk4rsyy21wkmcw32np2wg33iq7l-jq-1.7.1"
      },
      "system": "aarch64-linux",
      "group": "helper-tools",
      "priority": 5
    },
    {
      "attr_path": "jq",
      "broken": false,
      "derivation": "/nix/store/pv893078nkchi2flra5cfdl04fv2qzcz-jq-1.7.1.drv",
      "description": "Lightweight and flexible command-line JSON processor",
      "install_id": "jq",
      "license": "MIT",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "jq-1.7.1",
      "pname": "jq",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T05:14:19.660971Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "1.7.1",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/3nawavhk39z9p0l87vdpbiarvyirzv01-jq-1.7.1-bin",
        "dev": "/nix/store/g53bmywyp08ppwfcr8i0hilpz2v7vby7-jq-1.7.1-dev",
        "doc": "/nix/store/hf32jpvi9pg899kz18iwnlw57w83kq78-jq-1.7.1-doc",
        "man": "/nix/store/9ym6hfn6id819vmjgffn9lxk980q6xbm-jq-1.7.1-man",
        "out": "/nix/store/2y5zfakdg53hqbac3rnvb72vmllpn9zf-jq-1.7.1"
      },
      "system": "x86_64-linux",
      "group": "helper-tools",
      "priority": 5
    },
    {
      "attr_path": "jq",
      "broken": false,
      "derivation": "/nix/store/kysqbgfgwgifws19mgz09d4044rzl03f-jq-1.7.1.drv",
      "description": "Lightweight and flexible command-line JSON processor",
      "install_id": "jq",
      "license": "MIT",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "jq-1.7.1",
      "pname": "jq",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:18:43.164752Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "1.7.1",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/d0r880glv6pvpxibssrcl2v7v4sqijfx-jq-1.7.1-bin",
        "dev": "/nix/store/d3w37gvgsapsh612vyy0b0lnjq81bhhd-jq-1.7.1-dev",
        "doc": "/nix/store/31mydlnw005lpaslc5yqgmxy5mfhzs98-jq-1.7.1-doc",
        "man": "/nix/store/51dbhjrpi3dnj3jv9npjk1wvqcjfpz2n-jq-1.7.1-man",
        "out": "/nix/store/kd68ckkv7lqnfb46rk1746mhig0hhpl5-jq-1.7.1"
      },
      "system": "aarch64-darwin",
      "group": "helper-tools",
      "priority": 5
    },
    {
      "attr_path": "jq",
      "broken": false,
      "derivation": "/nix/store/h2pw48h5vwkabjrvq7ff08y6gdfl7dqw-jq-1.7.1.drv",
      "description": "Lightweight and flexible command-line JSON processor",
      "install_id": "jq",
      "license": "MIT",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "jq-1.7.1",
      "pname": "jq",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:53:40.357520Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "1.7.1",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/d7scikakdayw3xjw8pm55q8j146qwxwd-jq-1.7.1-bin",
        "dev": "/nix/store/h80zvna5sb5klg3q56l22rw2cac35pzm-jq-1.7.1-dev",
        "doc": "/nix/store/v51p982wn5hrjvfprr5h5f7ffakj86iq-jq-1.7.1-doc",
        "man": "/nix/store/giabrd1iawzw666w62n4dw7czs6k580i-jq-1.7.1-man",
        "out": "/nix/store/8fd0arnj59yvp8clz9a14p61dhchp8kk-jq-1.7.1"
      },
      "system": "x86_64-darwin",
      "group": "helper-tools",
      "priority": 5
    },
    {
      "attr_path": "bash",
      "broken": false,
      "derivation": "/nix/store/6y93yh90w0x1z5d8vhrnkdsxsliydgwq-bash-interactive-5.2p37.drv",
      "description": "GNU Bourne-Again Shell, the de facto standard shell on Linux (for interactive use)",
      "install_id": "bash",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "bash-interactive-5.2p37",
      "pname": "bash",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:36:21.877971Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "5.2p37",
      "outputs_to_install": [
        "man",
        "out"
      ],
      "outputs": {
        "debug": "/nix/store/26zf7pim4zpwfjb95r8cchm7h93cz7mr-bash-interactive-5.2p37-debug",
        "dev": "/nix/store/1vg484z3g5sv0lnmnag2ag4mj6fgsm4x-bash-interactive-5.2p37-dev",
        "doc": "/nix/store/lnh49s60fcbncc18z5n9gvxaw64fjpcc-bash-interactive-5.2p37-doc",
        "info": "/nix/store/f6ay4qmjndhsvqb82wr6vgckzfbri8xy-bash-interactive-5.2p37-info",
        "man": "/nix/store/1mnhsigz5wnb5dq0v38nbfngfp83nxwa-bash-interactive-5.2p37-man",
        "out": "/nix/store/86spmd2gg2v0v7zviqxh6y4jrs0zb37i-bash-interactive-5.2p37"
      },
      "system": "aarch64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "bash",
      "broken": false,
      "derivation": "/nix/store/rpyqrks23ipmcpmjl4242gmqk3v1z21j-bash-interactive-5.2p37.drv",
      "description": "GNU Bourne-Again Shell, the de facto standard shell on Linux (for interactive use)",
      "install_id": "bash",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "bash-interactive-5.2p37",
      "pname": "bash",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T05:14:16.438484Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "5.2p37",
      "outputs_to_install": [
        "man",
        "out"
      ],
      "outputs": {
        "debug": "/nix/store/92023r59a9v1nkgrqv9mayddd3233p45-bash-interactive-5.2p37-debug",
        "dev": "/nix/store/9nrh5ga5dgz3f957w33iqzsfw2gkk5hq-bash-interactive-5.2p37-dev",
        "doc": "/nix/store/1qbrlv6ll2sdrac04zpvb6hjvg30307y-bash-interactive-5.2p37-doc",
        "info": "/nix/store/4rw0flfjd0xlis2yik8hz8izilsnxf1h-bash-interactive-5.2p37-info",
        "man": "/nix/store/1z2p0d1sjd9gnfl049l61sy2qdd61dvb-bash-interactive-5.2p37-man",
        "out": "/nix/store/m3hnxdlz6v6650ggqz29nsqbvzvdvnsy-bash-interactive-5.2p37"
      },
      "system": "x86_64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "bash",
      "broken": false,
      "derivation": "/nix/store/7l7c6d6as7x2nwfzb4236fjdm02mjs3c-bash-interactive-5.2p37.drv",
      "description": "GNU Bourne-Again Shell, the de facto standard shell on Linux (for interactive use)",
      "install_id": "bash",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "bash-interactive-5.2p37",
      "pname": "bash",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:18:41.920491Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "5.2p37",
      "outputs_to_install": [
        "man",
        "out"
      ],
      "outputs": {
        "dev": "/nix/store/1hbx0k930mf4pkb994x5dfgs7lcnsqq0-bash-interactive-5.2p37-dev",
        "doc": "/nix/store/gyxhzxgh07pvqni8hbsls1bgzj1a2f8l-bash-interactive-5.2p37-doc",
        "info": "/nix/store/m9ccdl3xgmk3dzz1lrvbw79sjq0dxdbh-bash-interactive-5.2p37-info",
        "man": "/nix/store/q9gsfxm6w9awwahz0sj408bx5i22xzr5-bash-interactive-5.2p37-man",
        "out": "/nix/store/gh2gn7xbqnahi44yd01xkv2vy172bg1v-bash-interactive-5.2p37"
      },
      "system": "aarch64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "bash",
      "broken": false,
      "derivation": "/nix/store/xyrdkzinhkcvd9l5jmbadhpaw750yzlh-bash-interactive-5.2p37.drv",
      "description": "GNU Bourne-Again Shell, the de facto standard shell on Linux (for interactive use)",
      "install_id": "bash",
      "license": "GPL-3.0-or-later",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "bash-interactive-5.2p37",
      "pname": "bash",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:53:39.086723Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "5.2p37",
      "outputs_to_install": [
        "man",
        "out"
      ],
      "outputs": {
        "dev": "/nix/store/241gc427lrqrnybd8j23wpc4sz28g12r-bash-interactive-5.2p37-dev",
        "doc": "/nix/store/r6rpyfnqzzjw01q9khczbnhynf45ixjq-bash-interactive-5.2p37-doc",
        "info": "/nix/store/m9g7v85kixxb6qaxys8v8hg14g68nwm3-bash-interactive-5.2p37-info",
        "man": "/nix/store/pf0h950fa13szp0giihc2gd8vpwm91mi-bash-interactive-5.2p37-man",
        "out": "/nix/store/wlkvcypggzncs98lnrl2ivywkiqqgjnw-bash-interactive-5.2p37"
      },
      "system": "x86_64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "gum",
      "broken": false,
      "derivation": "/nix/store/3czfawlla2cp2pr0wmb151w3s3nniqrc-gum-0.16.0.drv",
      "description": "Tasty Bubble Gum for your shell",
      "install_id": "gum",
      "license": "MIT",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "gum-0.16.0",
      "pname": "gum",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:36:23.725965Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "0.16.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/p7f7gana5d3f4rvlal3sz2x8l4g8s5g4-gum-0.16.0"
      },
      "system": "aarch64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "gum",
      "broken": false,
      "derivation": "/nix/store/4il6pjc1qhn6mhgxfbfbkygy29ymk3j1-gum-0.16.0.drv",
      "description": "Tasty Bubble Gum for your shell",
      "install_id": "gum",
      "license": "MIT",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "gum-0.16.0",
      "pname": "gum",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T05:14:18.524193Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "0.16.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/kr0rzsgcv41c3qz5cnj7lyrpipcpnmfb-gum-0.16.0"
      },
      "system": "x86_64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "gum",
      "broken": false,
      "derivation": "/nix/store/j68sh9zv7wl2183chdjh9lyfgirrf82m-gum-0.16.0.drv",
      "description": "Tasty Bubble Gum for your shell",
      "install_id": "gum",
      "license": "MIT",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "gum-0.16.0",
      "pname": "gum",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:18:42.861682Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "0.16.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/8pyjhiwin98a1bcg2l51lv98bz0jw7wq-gum-0.16.0"
      },
      "system": "aarch64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "gum",
      "broken": false,
      "derivation": "/nix/store/sfm0cm6sj219zppa4xngzggqbkk3plki-gum-0.16.0.drv",
      "description": "Tasty Bubble Gum for your shell",
      "install_id": "gum",
      "license": "MIT",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "gum-0.16.0",
      "pname": "gum",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:53:40.048219Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "0.16.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/3hfzhy6kp19x03l360mf5k2k8imjg14a-gum-0.16.0"
      },
      "system": "x86_64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "jdk",
      "broken": false,
      "derivation": "/nix/store/2xk8jh3qa3d8v8hs7xy8mpwddkmiq3dh-openjdk-21.0.5+11.drv",
      "description": "Open-source Java Development Kit",
      "install_id": "jdk",
      "license": "GPL-2.0-only",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "openjdk-21.0.5+11",
      "pname": "jdk",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:36:24.657230Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "21.0.5+11",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "debug": "/nix/store/di3vg628rw8vy5sgfighv4bhag7vcmaw-openjdk-21.0.5+11-debug",
        "out": "/nix/store/1vdnkw9l0iv9jyaqp44p7afb11x94ykx-openjdk-21.0.5+11"
      },
      "system": "aarch64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "jdk",
      "broken": false,
      "derivation": "/nix/store/cqzq3qqjgp9rj492m2cj82x8vc3c1py2-openjdk-21.0.5+11.drv",
      "description": "Open-source Java Development Kit",
      "install_id": "jdk",
      "license": "GPL-2.0-only",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "openjdk-21.0.5+11",
      "pname": "jdk",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T05:14:19.582050Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "21.0.5+11",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "debug": "/nix/store/8745ilvhps8wz7b109304xbra9nczpnd-openjdk-21.0.5+11-debug",
        "out": "/nix/store/k7sl9awa4r5i8z3fj8wz90cac1v7s5n7-openjdk-21.0.5+11"
      },
      "system": "x86_64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "jdk",
      "broken": false,
      "derivation": "/nix/store/zrjvkhk1hx7mqi5hxi9j6651jqafxwxv-zulu-ca-jdk-21.0.4.drv",
      "description": "Certified builds of OpenJDK",
      "install_id": "jdk",
      "license": "GPL-2.0-only",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "zulu-ca-jdk-21.0.4",
      "pname": "jdk",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:18:43.126803Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "21.0.4",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/36yvq3c4i9qcqhm4n37v5qnk5sqjy5iq-zulu-ca-jdk-21.0.4"
      },
      "system": "aarch64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "jdk",
      "broken": false,
      "derivation": "/nix/store/7b5rgvacfjzx8jd24jlmplyz48y9jxx3-zulu-ca-jdk-21.0.4.drv",
      "description": "Certified builds of OpenJDK",
      "install_id": "jdk",
      "license": "GPL-2.0-only",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "zulu-ca-jdk-21.0.4",
      "pname": "jdk",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:53:40.318708Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "21.0.4",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/dlf455vq9gh7mhdg5h2mvkf87any49g4-zulu-ca-jdk-21.0.4"
      },
      "system": "x86_64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "apacheKafka",
      "broken": false,
      "derivation": "/nix/store/8785mvic61sdp4lr7zqkqkm1dxxcgvbm-apache-kafka-2.13-4.0.0.drv",
      "description": "High-throughput distributed messaging system",
      "install_id": "kafka",
      "license": "Apache-2.0",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "apache-kafka-2.13-4.0.0",
      "pname": "apacheKafka",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:36:21.805940Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "2.13-4.0.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/z40jyzmw39nww09cpgly0hb02iafqkk2-apache-kafka-2.13-4.0.0"
      },
      "system": "aarch64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "apacheKafka",
      "broken": false,
      "derivation": "/nix/store/p9i0yd40p0yh79vj3bnvng898jpq0rlj-apache-kafka-2.13-4.0.0.drv",
      "description": "High-throughput distributed messaging system",
      "install_id": "kafka",
      "license": "Apache-2.0",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "apache-kafka-2.13-4.0.0",
      "pname": "apacheKafka",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T05:14:16.356789Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "2.13-4.0.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/kggi42gkbl6pf5knq7dvadjba76ncx9l-apache-kafka-2.13-4.0.0"
      },
      "system": "x86_64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "apacheKafka",
      "broken": false,
      "derivation": "/nix/store/7w5wdh7gkv80ygssbmrlb3s9nzpmp1a1-apache-kafka-2.13-4.0.0.drv",
      "description": "High-throughput distributed messaging system",
      "install_id": "kafka",
      "license": "Apache-2.0",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "apache-kafka-2.13-4.0.0",
      "pname": "apacheKafka",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:18:41.863140Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "2.13-4.0.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/rsih9kb17h5srswmlqp65dfvgia835qk-apache-kafka-2.13-4.0.0"
      },
      "system": "aarch64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "apacheKafka",
      "broken": false,
      "derivation": "/nix/store/4h6nl21dm23gk28qjg00zsvghwvzibi9-apache-kafka-2.13-4.0.0.drv",
      "description": "High-throughput distributed messaging system",
      "install_id": "kafka",
      "license": "Apache-2.0",
      "locked_url": "https://github.com/flox/nixpkgs?rev=f771eb401a46846c1aebd20552521b233dd7e18b",
      "name": "apache-kafka-2.13-4.0.0",
      "pname": "apacheKafka",
      "rev": "f771eb401a46846c1aebd20552521b233dd7e18b",
      "rev_count": 789333,
      "rev_date": "2025-04-24T20:20:57Z",
      "scrape_date": "2025-04-27T04:53:39.034318Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "2.13-4.0.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/07vxiy0qq0y0ivsiax7k8syfg3bqkn4x-apache-kafka-2.13-4.0.0"
      },
      "system": "x86_64-darwin",
      "group": "toplevel",
      "priority": 5
    }
  ]
}
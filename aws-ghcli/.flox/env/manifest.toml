# This is a Flox environment manifest.
# Visit flox.dev/docs/concepts/manifest/
# or see flox-edit(1), manifest.toml(5) for more information.
version = 1

[install]
_1password.pkg-path = "_1password"
awscli2.pkg-path = "awscli2"
gh.pkg-path = "gh"
gitFull.pkg-path = "gitFull"
gum.pkg-path = "gum"
bat.pkg-path = "bat"
curl.pkg-path = "curl"

[vars]
# 1password github config
OP_GITHUB_VAULT = "1password"           # Name of 1Password vault containing GitHub tokens
OP_GITHUB_TOKEN_ITEM = "repo"    # Name of the item storing GitHub token
OP_GITHUB_TOKEN_FIELD = "token"               # Field name containing the GitHub token

# 1password aws config
OP_AWS_VAULT = "1password"              # Name of 1Password vault containing AWS credentials
OP_AWS_CREDENTIALS_ITEM = "awskeyz"   # Name of the item storing AWS credentials
OP_AWS_USERNAME_FIELD = "username"            # Field name for AWS access key ID
OP_AWS_CREDENTIALS_FIELD = "credential"      # Field name for AWS secret access key

[hook]
on-activate = '''
# 1Password authentication
SESSION_FILE="$HOME/.config/op/1password-session.token"
[[ -f "$SESSION_FILE" ]] && OP_SESSION_TOKEN=$(cat "$SESSION_FILE") && op whoami --session "$OP_SESSION_TOKEN" >/dev/null 2>&1 || {
    echo "Authenticating with 1Password..."
    for i in {1..3}; do
        if OP_SESSION_TOKEN=$(op signin --raw 2>/dev/null); then
            mkdir -p "$(dirname "$SESSION_FILE")"
            echo "$OP_SESSION_TOKEN" > "$SESSION_FILE"
            chmod 600 "$SESSION_FILE"
            break
        fi
        [[ $i -eq 3 ]] && { echo "Authentication failed after 3 attempts."; exit 1; } || echo "Attempt $i failed."
    done
}

# create shell-specific wrapper files
mkdir -p "${FLOX_ENV_CACHE}/shell"

# bash/zsh wrapper file
cat > "${FLOX_ENV_CACHE}/shell/wrapper.sh" << 'EOSH'
# load 1password session token
[[ -f "$HOME/.config/op/1password-session.token" ]] && export OP_SESSION_TOKEN=$(cat "$HOME/.config/op/1password-session.token")

# gh wrapper function
gh() { op run --session "$OP_SESSION_TOKEN" --env-file <(echo "GITHUB_TOKEN=op://$OP_GITHUB_VAULT/$OP_GITHUB_TOKEN_ITEM/$OP_GITHUB_TOKEN_FIELD") -- gh "$@"; }

# git wrapper function
git() {
  if [[ "$1" =~ ^(push|pull|fetch|clone|remote)$ ]] && token=$(op read "op://$OP_GITHUB_VAULT/$OP_GITHUB_TOKEN_ITEM/$OP_GITHUB_TOKEN_FIELD" --session "$OP_SESSION_TOKEN" 2>/dev/null); then
    askpass=$(mktemp)
    echo -e "#!/bin/sh\necho $token" > "$askpass"
    chmod +x "$askpass"
    GIT_ASKPASS="$askpass" GIT_TERMINAL_PROMPT=0 command git -c credential.helper= "$@"
    rm -f "$askpass"
  else
    command git "$@"
  fi
}

# aws wrapper function
aws() { op run --session "$OP_SESSION_TOKEN" --env-file <(echo -e "AWS_ACCESS_KEY_ID=op://$OP_AWS_VAULT/$OP_AWS_CREDENTIALS_ITEM/$OP_AWS_USERNAME_FIELD\nAWS_SECRET_ACCESS_KEY=op://$OP_AWS_VAULT/$OP_AWS_CREDENTIALS_ITEM/$OP_AWS_CREDENTIALS_FIELD") -- aws "$@"; }
EOSH
chmod +x "${FLOX_ENV_CACHE}/shell/wrapper.sh"

# fish wrapper file
cat > "${FLOX_ENV_CACHE}/shell/wrapper.fish" << 'EOFISH'
# load 1password session token
test -f "$HOME/.config/op/1password-session.token" && set -gx OP_SESSION_TOKEN (cat "$HOME/.config/op/1password-session.token")

# gh wrapper function
function gh
    op run --session "$OP_SESSION_TOKEN" --env-file (echo "GITHUB_TOKEN=op://$OP_GITHUB_VAULT/$OP_GITHUB_TOKEN_ITEM/$OP_GITHUB_TOKEN_FIELD" | psub) -- gh $argv
end

# git wrapper function
function git
    if contains -- $argv[1] push pull fetch clone remote
        set -l token (op read "op://$OP_GITHUB_VAULT/$OP_GITHUB_TOKEN_ITEM/$OP_GITHUB_TOKEN_FIELD" --session "$OP_SESSION_TOKEN" 2>/dev/null)
        if test $status -eq 0
            set -l askpass (mktemp)
            echo -e "#!/bin/sh\necho $token" > "$askpass"
            chmod +x "$askpass"
            env GIT_ASKPASS="$askpass" GIT_TERMINAL_PROMPT=0 command git -c credential.helper= $argv
            rm -f "$askpass"
        else
            command git $argv
        end
    else
        command git $argv
    end
end

# aws wrapper function
function aws
    op run --session "$OP_SESSION_TOKEN" --env-file (echo -e "AWS_ACCESS_KEY_ID=op://$OP_AWS_VAULT/$OP_AWS_CREDENTIALS_ITEM/$OP_AWS_USERNAME_FIELD\nAWS_SECRET_ACCESS_KEY=op://$OP_AWS_VAULT/$OP_AWS_CREDENTIALS_ITEM/$OP_AWS_CREDENTIALS_FIELD" | psub) -- aws $argv
end
EOFISH
chmod +x "${FLOX_ENV_CACHE}/shell/wrapper.fish"

# curl README.md from github repo
get_help() {
  local fail_silently=${1:-true}
  local readme_path="${FLOX_ENV_CACHE}/README.md"
  local readme_url="https://raw.githubusercontent.com/barstoolbluz/floxenvs/main/aws-ghcli/README.md"
  
  if $fail_silently; then
    curl -s "$readme_url" -o "$readme_path" >/dev/null 2>&1 || true
  else
    curl -s "$readme_url" -o "$readme_path"
  fi
}

# informational message; comment-out or delete 'show_help' under # runnit to disable
show_help() {
    gum style \
        --border rounded \
        --border-foreground 240 \
        --padding "1 2" \
        --margin "1 0" \
        --width 96 \
        "$(gum style --foreground 141 --bold 'This is a  F l o x  environment for AWS and GitHub CLI')

ðŸ‘‰  Getting Help:
    $(gum style --foreground 212 'help')        Display this help message

ðŸ‘‰  Integrated Tools:
    $(gum style --foreground 212 'aws')         AWS CLI with 1Password credentials
    $(gum style --foreground 212 'gh')          GitHub CLI with 1Password auth
    $(gum style --foreground 212 'git')         Git with 1Password auth for remote operations

ðŸ‘‰  Usage Tips:
    â€¢ Use $(gum style --foreground 212 'aws'), $(gum style --foreground 212 'gh'), and $(gum style --foreground 212 'git') interactively as normal
    â€¢ In scripts, source the shell wrapper files from:
      $(gum style --foreground 212 "\$FLOX_ENV_CACHE/shell/wrapper.[sh|fish]")
    â€¢ Bypass wrappers with $(gum style --foreground 212 'command aws'), $(gum style --foreground 212 'command gh'), or $(gum style --foreground 212 'command git')
    
ðŸ‘‰  Authentication:
    â€¢ Fetches credentials securely from 1Password
    â€¢ Authentication happens automatically when needed"

    echo ""
}

# runnit
get_help
show_help
'''

[profile]
bash = '''
# Source the 1Password wrapper functions
[[ -f "${FLOX_ENV_CACHE}/shell/wrapper.sh" ]] && source "${FLOX_ENV_CACHE}/shell/wrapper.sh"

help() { [[ -f "$FLOX_ENV_CACHE/README.md" ]] && bat --paging=always --style=plain "$FLOX_ENV_CACHE/README.md"; }
'''

zsh = '''
# Source the 1Password wrapper functions
[[ -f "${FLOX_ENV_CACHE}/shell/wrapper.sh" ]] && source "${FLOX_ENV_CACHE}/shell/wrapper.sh"

help() { [[ -f "$FLOX_ENV_CACHE/README.md" ]] && bat --paging=always --style=plain "$FLOX_ENV_CACHE/README.md"; }
'''

fish = '''
# Source the 1Password wrapper functions
test -f "$FLOX_ENV_CACHE/shell/wrapper.fish" && source "$FLOX_ENV_CACHE/shell/wrapper.fish"

function help; test -f "$FLOX_ENV_CACHE/README.md" && bat --paging=always --style=plain "$FLOX_ENV_CACHE/README.md"; end
'''

# Settings for compatible systems
[options]
systems = ["aarch64-darwin", "aarch64-linux", "x86_64-darwin", "x86_64-linux"]

## Flox Environment Manifest -----------------------------------------
##
##   _Everything_ you need to know about the _manifest_ is here:
##
##               https://flox.dev/docs/concepts/manifest
##
## -------------------------------------------------------------------
# Flox manifest version managed by Flox CLI
version = 1


## Install Packages --------------------------------------------------
##  $ flox install gum  <- puts a package in [install] section below
##  $ flox search gum   <- search for a package
##  $ flox show gum     <- show all versions of a package
## -------------------------------------------------------------------
[install]
gh.pkg-path = "gh"
gitFull.pkg-path = "gitFull"
gum.pkg-path = "gum"
awscli2.pkg-path = "awscli2"
jq.pkg-path = "jq"

## Environment Variables ---------------------------------------------
##  ... available for use in the activated environment
##      as well as [hook], [profile] scripts and [services] below.
## -------------------------------------------------------------------
[vars]
# INTRO_MESSAGE = "It's gettin' Flox in here"


## Activation Hook ---------------------------------------------------
##  ... run by _bash_ shell when you run 'flox activate'.
## -------------------------------------------------------------------
[hook]
on-activate = '''
#!/usr/bin/env bash
# setup cli tool auth on env activation

# write core auth to cache
FLOX_AUTH_CORE="${FLOX_ENV_CACHE}/flox_auth_core.sh"
cat > "$FLOX_AUTH_CORE" << 'EOF'
#!/usr/bin/env bash
# core auth framework - does the heavy lifting

# setup dirs and files
AUTH_STORAGE_DIR="${FLOX_ENV_CACHE}/auth_storage"
PLUGINS_DIR="${FLOX_ENV_CACHE}/auth_plugins"
CONFIG_FILE="${FLOX_ENV_CACHE}/auth_config.json"
mkdir -p "$AUTH_STORAGE_DIR" "$PLUGINS_DIR" && chmod 700 "$AUTH_STORAGE_DIR"
[[ ! -f "$CONFIG_FILE" ]] && echo '{"enabled_providers":["github","aws"]}' > "$CONFIG_FILE"

# Cache the storage provider - only compute once
STORAGE_PROVIDER=""

# minimal ui helper
show_message() { gum style --foreground "$3" "$1 $2"; }

# shared auth status messaging
auth_status_message() {
  local provider="$1" status="$2" success=$3
  
  if [[ $success -eq 0 ]]; then
    show_message "✓" "${provider^} $status successful" "114"
  else
    show_message "✗" "${provider^} $status failed" "160"
  fi
  return $success
}

# storage backend functions
get_secure_storage_provider() {
  if [[ -z "$STORAGE_PROVIDER" ]]; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
      STORAGE_PROVIDER="keychain"
    elif command -v secret-tool &>/dev/null; then
      STORAGE_PROVIDER="libsecret"
    else
      STORAGE_PROVIDER="file"
    fi
  fi
  echo "$STORAGE_PROVIDER"
}

store_secret() {
  local service="$1" username="$2" secret="$(echo -n "$3" | tr -d '[:space:]')"
  
  case "$(get_secure_storage_provider)" in
    keychain)
      security add-generic-password -s "flox_${service}" -a "$username" -w "$secret" -U ;;
    libsecret)
      echo -n "$secret" | secret-tool store --label="Flox ${service^}" service "flox_${service}" username "$username" ;;
    file)
      local secret_file="${AUTH_STORAGE_DIR}/${service}_${username}"
      echo "$secret" | openssl enc -aes-256-cbc -salt -pbkdf2 -out "$secret_file" -k "flox-${service}-${username}"
      chmod 600 "$secret_file" ;;
  esac
}

get_secret() {
  local service="$1" username="$2"
  
  case "$(get_secure_storage_provider)" in
    keychain)
      security find-generic-password -s "flox_${service}" -a "$username" -w 2>/dev/null ;;
    libsecret)
      secret-tool lookup service "flox_${service}" username "$username" 2>/dev/null ;;
    file)
      local secret_file="${AUTH_STORAGE_DIR}/${service}_${username}"
      [[ -f "$secret_file" ]] && openssl enc -aes-256-cbc -d -salt -pbkdf2 -in "$secret_file" -k "flox-${service}-${username}" 2>/dev/null ;;
  esac
}

# credential input helper
prompt_credentials() {
  local provider="$1" cred_name="$2" placeholder="$3" var_name="$4" hide_input="${5:-true}"
  local value=$(get_secret "$provider" "${USER}_${cred_name}")
  
  if [[ -z "$value" ]]; then
    if [[ "$hide_input" == "true" ]]; then
      value=$(gum input --password --placeholder "$placeholder" --value "")
    else
      value=$(gum input --placeholder "$placeholder" --value "")
    fi
  fi
  
  # Set the variable in the parent scope
  printf -v "$var_name" "%s" "$value"
  [[ -n "$value" ]]
  return $?
}

# plugin functions
list_available_plugins() {
  local plugins=("github:GitHub CLI Authentication" "aws:AWS CLI Authentication")
  
  # grab user plugins
  if [[ -d "$PLUGINS_DIR" ]]; then
    for plugin_file in "$PLUGINS_DIR"/*.sh; do
      [[ -f "$plugin_file" ]] && {
        local plugin_name=$(basename "$plugin_file" .sh)
        local plugin_desc=$(grep "# description:" "$plugin_file" | cut -d':' -f2-)
        plugins+=("${plugin_name}:${plugin_desc}")
      }
    done
  fi
  
  printf "%s\n" "${plugins[@]}"
}

get_enabled_providers() {
  [[ ! -f "$CONFIG_FILE" ]] && echo '{"enabled_providers":["github","aws"]}' > "$CONFIG_FILE"
  jq -r '.enabled_providers | join(" ")' "$CONFIG_FILE"
}

is_provider_enabled() {
  jq -e --arg provider "$1" '.enabled_providers[] | select(. == $provider)' "$CONFIG_FILE" &>/dev/null
}

enable_provider() {
  if ! is_provider_enabled "$1"; then
    local tmp_file=$(mktemp)
    jq --arg provider "$1" '.enabled_providers += [$provider]' "$CONFIG_FILE" > "$tmp_file"
    mv "$tmp_file" "$CONFIG_FILE"
    show_message "✓" "Enabled $1 authentication" "114"
  fi
}

disable_provider() {
  if is_provider_enabled "$1"; then
    local tmp_file=$(mktemp)
    jq --arg provider "$1" '.enabled_providers = [.enabled_providers[] | select(. != $provider)]' "$CONFIG_FILE" > "$tmp_file"
    mv "$tmp_file" "$CONFIG_FILE"
    show_message "✓" "Disabled $1 authentication" "114"
  fi
}

load_provider() {
  case "$1" in
    github|aws) return 0 ;;
    *) [[ -f "$PLUGINS_DIR/${1}.sh" ]] && source "$PLUGINS_DIR/${1}.sh" ;;
  esac
  return $?
}

# common auth plugin helper
auth_plugin_bootstrap() {
  local provider="$1"
  local check_func="$2"
  local auth_func="$3"
  local cred_setup_func="$4"
  
  if $check_func; then
    auth_status_message "$provider" "already authenticated" 0
    return 0
  fi
  
  # Setup credentials
  local creds=()
  if $cred_setup_func creds; then
    if $auth_func "${creds[@]}"; then
      gum confirm "Store ${provider^} credentials securely?" && {
        local i=0
        for cred_name in $(get_credential_names "$provider"); do
          store_secret "$provider" "${USER}_${cred_name}" "${creds[$i]}"
          ((i++))
        done
      }
      auth_status_message "$provider" "authentication" 0
      return 0
    else
      auth_status_message "$provider" "authentication" 1
      return 1
    fi
  fi
  
  show_message "✗" "No ${provider^} credentials provided" "160"
  return 1
}

# built-in auth providers
github_cli_auth() {
  case "$1" in
    check) gh auth status &>/dev/null ;;
    authenticate)
      local token="$2" tmp_file=$(mktemp)
      echo -n "$token" > "$tmp_file"
      gh auth login --with-token < "$tmp_file"
      local status=$?
      rm -f "$tmp_file"
      
      [[ $status -eq 0 ]] && export GITHUB_TOKEN="$token" GH_TOKEN="$token" && 
        git config --global credential.helper "gh auth git-credential"
      
      return $status
      ;;
    bootstrap)
      github_credentials() {
        local -n result=$1
        prompt_credentials "github" "token" "Enter GitHub token" "result[0]"
        return $?
      }
      
      github_check() {
        gh auth status &>/dev/null
      }
      
      github_authenticate() {
        github_cli_auth authenticate "$1"
      }
      
      get_credential_names() {
        [[ "$1" == "github" ]] && echo "token"
      }
      
      auth_plugin_bootstrap "github" github_check github_authenticate github_credentials
      ;;
    describe) echo "Authenticate with GitHub CLI" ;;
  esac
}

aws_cli_auth() {
  case "$1" in
    check) aws sts get-caller-identity &>/dev/null ;;
    authenticate)
      local access_key="$2" secret_key="$3" region="${4:-us-east-1}"
      
      aws configure set aws_access_key_id "$access_key"
      aws configure set aws_secret_access_key "$secret_key"
      aws configure set region "$region"
      
      if aws sts get-caller-identity &>/dev/null; then
        export AWS_ACCESS_KEY_ID="$access_key" AWS_SECRET_ACCESS_KEY="$secret_key" AWS_DEFAULT_REGION="$region"
        return 0
      fi
      return 1
      ;;
    bootstrap)
      aws_credentials() {
        local -n result=$1
        prompt_credentials "aws" "access_key" "Enter AWS Access Key ID" "result[0]" && 
        prompt_credentials "aws" "secret_key" "Enter AWS Secret Access Key" "result[1]" &&
        prompt_credentials "aws" "region" "AWS Region (default: us-east-1)" "result[2]" false
        
        # Set default region if empty
        [[ -z "${result[2]}" ]] && result[2]="us-east-1"
        
        return 0
      }
      
      aws_check() {
        aws sts get-caller-identity &>/dev/null
      }
      
      aws_authenticate() {
        aws_cli_auth authenticate "$1" "$2" "$3"
      }
      
      get_credential_names() {
        [[ "$1" == "aws" ]] && echo "access_key secret_key region"
      }
      
      auth_plugin_bootstrap "aws" aws_check aws_authenticate aws_credentials
      ;;
    describe) echo "Authenticate with AWS CLI" ;;
  esac
}

# create provider template
create_plugin_template() {
  local plugin_name="$1"
  local plugin_file="$PLUGINS_DIR/${plugin_name}.sh"
  
  cat > "$plugin_file" << EOL
#!/usr/bin/env bash
# description: authentication for ${plugin_name^} CLI

${plugin_name}_cli_auth() {
  case "\$1" in
    check) ${plugin_name} some-check-command &>/dev/null ;;
    authenticate)
      # auth logic using provided credentials
      local credential1="\$2" credential2="\$3"
      # implement auth here and return status
      ;;
    bootstrap)
      ${plugin_name}_credentials() {
        local -n result=\$1
        prompt_credentials "${plugin_name}" "credential1" "Enter Credential 1" "result[0]" && 
        prompt_credentials "${plugin_name}" "credential2" "Enter Credential 2" "result[1]"
        return \$?
      }
      
      ${plugin_name}_check() {
        ${plugin_name}_cli_auth check
      }
      
      ${plugin_name}_authenticate() {
        ${plugin_name}_cli_auth authenticate "\$1" "\$2"
      }
      
      get_credential_names() {
        [[ "\$1" == "${plugin_name}" ]] && echo "credential1 credential2"
      }
      
      auth_plugin_bootstrap "${plugin_name}" ${plugin_name}_check ${plugin_name}_authenticate ${plugin_name}_credentials
      ;;
    describe) echo "Authenticate with ${plugin_name^} CLI" ;;
  esac
}
EOL

  chmod +x "$plugin_file"
  show_message "✓" "Created plugin template for ${plugin_name}" "114"
}

# run auth for all enabled providers
cli_auth_manager() {
  for provider in $(get_enabled_providers); do
    load_provider "$provider" && ${provider}_cli_auth bootstrap ||
      show_message "✗" "Failed to load provider: $provider" "160"
  done
}
EOF

chmod +x "$FLOX_AUTH_CORE"

# write auth wizard script to cache dir
FLOX_AUTH_WIZARD="${FLOX_ENV_CACHE}/flox_auth_wizard.sh"
cat > "$FLOX_AUTH_WIZARD" << 'EOF'
#!/usr/bin/env bash
# auth wizard - manage cli auth providers

# source the core functions
source "${FLOX_ENV_CACHE}/flox_auth_core.sh"

# config wizard
auth_config_wizard() {
  show_message "i" "CLI Authentication Configuration" "212"
  
  local action=$(gum choose "Configure authentication providers" "Manage enabled providers" "Create new provider template" "Run authentication now" "Exit")
  
  case "$action" in
    "Configure authentication providers")
      local available_plugins=$(list_available_plugins)
      local choices=()
      
      while IFS=: read -r plugin_name plugin_desc; do
        choices+=("$plugin_name - $plugin_desc")
      done <<< "$available_plugins"
      
      local selected=$(gum choose "${choices[@]}")
      local provider=${selected%% -*}
      
      if [[ -n "$provider" ]]; then
        if is_provider_enabled "$provider"; then
          gum confirm "Disable $provider authentication?" && disable_provider "$provider"
        else
          gum confirm "Enable $provider authentication?" && enable_provider "$provider"
        fi
      fi
      
      auth_config_wizard
      ;;
    "Manage enabled providers")
      local enabled=$(get_enabled_providers)
      
      show_message "i" "Currently enabled providers:" "212"
      for provider in $enabled; do echo "- $provider"; done
      
      gum confirm "Return to main menu?" && auth_config_wizard
      ;;
    "Create new provider template")
      show_message "i" "Create a new provider template" "212"
      local new_provider=$(gum input --placeholder "Enter new provider name (e.g., azure, databricks)")
      
      if [[ -n "$new_provider" ]]; then
        create_plugin_template "$new_provider"
        
        if gum confirm "Enable this provider now?"; then
          enable_provider "$new_provider"
          show_message "i" "Edit ${PLUGINS_DIR}/${new_provider}.sh to implement authentication" "212"
        fi
      fi
      
      auth_config_wizard
      ;;
    "Run authentication now")
      cli_auth_manager
      auth_config_wizard
      ;;
    "Exit")
      show_message "i" "Exiting configuration wizard" "212"
      ;;
  esac
}

# run the wizard
auth_config_wizard
EOF

chmod +x "$FLOX_AUTH_WIZARD"

# run auth on activation
source "$FLOX_AUTH_CORE"
cli_auth_manager
'''


## Profile script ----------------------------------------------------
## ... sourced by _your shell_ when you run 'flox activate'.
## -------------------------------------------------------------------
[profile]
bash = '''
# set up flox-auth-configure command for bash
function flox-auth-configure() {
  ${FLOX_ENV_CACHE}/flox_auth_wizard.sh
}
'''

zsh = '''
# set up flox-auth-configure command for zsh
function flox-auth-configure() {
  ${FLOX_ENV_CACHE}/flox_auth_wizard.sh
}
'''

fish = '''
# set up flox-auth-configure command for fish
function flox-auth-configure
  ${FLOX_ENV_CACHE}/flox_auth_wizard.sh
end
'''


## Services ----------------------------------------------------------
##  $ flox services start             <- Starts all services
##  $ flox services status            <- Status of running services
##  $ flox activate --start-services  <- Activates & starts all
## -------------------------------------------------------------------
[services]
# myservice.command = "python3 -m http.server"


## Other Environment Options -----------------------------------------
[options]
# Systems that environment is compatible with
systems = [
  "aarch64-darwin",
  "aarch64-linux",
  "x86_64-darwin",
  "x86_64-linux",
]
# Uncomment to disable CUDA detection.
# cuda-detection = false
